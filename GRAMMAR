<module> ::= <namespace>? <import>* <decl>*

<namespace> := "namespace" <identifier> ("::" <identifier>)* ";"

<import> ::= "import" <literal-bytes> ";"

<decl> ::= <decl-variable>
         | <decl-constant>
         | <decl-function>
         | <decl-struct>
         | <decl-extend>
         | <decl-alias>
         | <decl-extern-variable>

<decl-variable> ::= "var" <identifier> ":" <typespec> "=" <expr> ";"

<decl-constant> ::= "const" <identifier> ":" <typespec> "=" <expr> ";"

<decl-function> ::= "func" <identifier> <template-parameter-list>? "(" <parameter-list> ")" <typespec> <block>

<decl-struct> ::= "struct" <identifier> <template-parameter-list>? "{" <member-list> "}"

<decl-extend> ::= "extend" <typespec> <decl>

<decl-alias> ::= "alias" <identifier> "=" <symbol> ";"

<decl-extern-variable> ::= "extern" "var" <identifier> ":" <typespec> ";"

<stmt> ::= <stmt-decl>
         | <stmt-defer>
         | <stmt-if>
         | <stmt-for-range>
         | <stmt-for-expr>
         | <stmt-break>
         | <stmt-continue>
         | <stmt-dump>
         | <stmt-return>
         | <stmt-assign>
         | <stmt-expr>

<stmt-decl> ::= <decl>

<stmt-defer> ::= "defer" <block>

<stmt-if> ::= "if" <expr> <block> ("elif" <expr> <block>)* ("else" <block>)?

<stmt-for-range> ::= "for" <identifier> "in" <expr> ":" <expr> <block>

<stmt-for-expr> ::= "for" <expr> <block>

<stmt-break> ::= "break" ";"

<stmt-continue> ::= "continue" ";"

<stmt-dump> ::= "dump" <expr> ";"

<stmt-return> ::= "return" <expr>? ";"

<stmt-assign> ::= <expr> "=" <expr> ";"

<stmt-expr> ::= <expr> ";"

<expr> ::= <symbol>
         | <identifier>
         | <boolean>
         | <integer>
         | <expr-character>
         | <expr-bytes>
         | <expr-array>
         | <expr-slice>
         | <expr-array-slice>
         | <expr-struct>
         | <expr-cast>
         | <expr-grouped>
         | <expr-syscall>
         | <expr-call>
         | <expr-access-index>
         | <expr-access-slice>
         | <expr-access-member>
         | <expr-access-dereference>
         | <expr-sizeof>
         | <expr-alignof>
         | <expr-unary>
         | <expr-binary>

<expr-character> ::= <literal-character>

<expr-bytes> ::= <literal-bytes>

<expr-array> ::= "(" ":" <typespec-array> ")" "[" "]"
               | "(" ":" <typespec-array> ")" "[" <expr> "..." "]"
               | "(" ":" <typespec-array> ")" "[" <expr> ("," <expr>)* ("," <expr> "...")? "]"

<expr-slice> ::= "(" ":" <typespec-slice> ")" "{" <expr> "," <expr> "}"

<expr-array-slice> ::= "(" ":" <typespec-slice> ")" "[" <expr> ("," <expr>)* "]"

<expr-struct> ::= "(" ":" <typespec> ")" "{" <member-initializer-list> "}"

<expr-cast> ::= "(" ":" <typespec> ")" <expr>

<expr-grouped> ::= "(" <expr> ")"

<expr-syscall> ::= "syscall" "(" <expr> ("," <expr>)* ")"

<expr-call> ::= <expr> "(" (<expr> ("," <expr>)*)? ")"

<expr-access-index> ::= <expr> "[" <expr> "]"

<expr-access-slice> ::= <expr> "[" <expr> ":" <expr> "]"

<expr-access-member> ::= <expr> "." <identifier>

<expr-access-dereference> ::= <expr> ".*"

<expr-sizeof> ::= "sizeof" "(" <typespec> ")"

<expr-alignof> ::= "alignof" "(" <typespec> ")"

<expr-unary> ::= "not" <expr>
               | "+" <expr>
               | "-" <expr>
               | "~" <expr>
               | "*" <expr>
               | "&" <expr>
               | "countof" "(" <expr> ")"

<expr-binary> ::= <expr> "or" <expr>
                | <expr> "and" <expr>
                | <expr> "==" <expr>
                | <expr> "!=" <expr>
                | <expr> "<=" <expr>
                | <expr> "<" <expr>
                | <expr> ">=" <expr>
                | <expr> ">" <expr>
                | <expr> "+" <expr>
                | <expr> "-" <expr>
                | <expr> "*" <expr>
                | <expr> "/" <expr>
                | <expr> "|" <expr>
                | <expr> "^" <expr>
                | <expr> "&" <expr>

<block> ::= "{" <stmt>* "}"

<literal-character> ::= "'" <character> "'"

<literal-bytes> ::= '"' <character>* '"'

<symbol> ::= "::"? <symbol-element> ("::" <symbol-element>)*

<symbol-element> ::= <identifier> <template-parameter-list>?

<template-parameter-list> ::= "[" "[" <template-parameter> ("," <template-parameter>)* "]" "]"

<template-parameter> ::= <identifier>

<template-argument-list> ::= <template-argument>+

<template-argument> ::= <typespec>

<function-parameter-list> ::= ( <function-parameter> ("," <function-parameter>)* )?

<function-parameter> ::= <identifier> ":" <typespec>

<member-list> ::= <member>*

<member> ::= <member-variable>
           | <member-constant>
           | <member-function>

<member-variable> ::= "var" <identifier> ":" <typespec> ";"

<member-constant> ::= <decl-constant>

<member-function> ::=  <decl-function>

<member-initializer-list> ::= ( <member-initializer> ("," <member-initializer>)* )?

<member-initializer> ::= "." <identifier> "=" <expr>

<typespec> ::= <symbol>
             | <typespec-function>
             | <typespec-pointer>
             | <typespec-array>
             | <typespec-slice>
             | <typespec-typeof>

<typespec-function> ::= func "(" ( <typespec> ("," <typespec> )* )? ")" <typespec>

<typespec-pointer> ::= "*" <typespec>

<typespec-array> ::= "[" <expr> "]" <typespec>

<typespec-slice> ::= "[" "]" <typespec>

<typespec-typeof> ::= "typeof" "(" <expr> ")"

<identifier> ::= <letter> (<letter> | <digit-dec>)*

<character> ::= "\0"
              | "\t"
              | "\n"
              | '\''
              | '\"'
              | "\\"
              | ? printable ASCII character ?

<letter> ::= "A" .. "Z" | "a" .. "z" | "_"

<integer> ::= ("+" | "-")? <integer-number> <integer-suffix>?

<integer-number> ::= <integer-number-bin>
                   | <integer-number-oct>
                   | <integer-number-dec>
                   | <integer-number-hex>

<integer-suffix> ::= "y"
                   | "u8"
                   | "s8"
                   | "u16"
                   | "s16"
                   | "u32"
                   | "s32"
                   | "u64"
                   | "s64"
                   | "u"
                   | "s"

<integer-number-bin> ::= "0b" <digit-bin>+
<integer-number-oct> ::= "0o" <digit-oct>+
<integer-number-dec> ::=      <digit-dec>+
<integer-number-hex> ::= "0x" <digit-hex>+

<digit-bin> ::= "0" | "1"
<digit-oct> ::= "0" .. "7"
<digit-dec> ::= "0" .. "9"
<digit-hex> ::= "0" .. "9" | "A" .. "F" | "a" .. "f"

<boolean> ::= "true" | "false"
