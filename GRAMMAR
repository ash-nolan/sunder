<module> ::= <decl>*

<decl> ::= <decl-variable>
         | <decl-constant>
         | <decl-function>

<decl-variable> ::= "var" <identifier> ":" <typespec> "=" <expr> ";"

<decl-constant> ::= "const" <identifier> ":" <typespec> "=" <expr> ";"

<decl-function> ::= "func" <identifier> "(" <parameter-list> ")" <typespec> <block>

<stmt> ::= <stmt-decl>
         | <stmt-if>
         | <stmt-for-range>
         | <stmt-for-expr>
         | <stmt-dump>
         | <stmt-return>
         | <stmt-assign>
         | <stmt-expr>

<stmt-decl> ::= <decl>

<stmt-if> ::= "if" <expr> <block> ("elif" <expr> <block>)* ("else" <block>)?

<stmt-for-range> ::= "for" <identifier> "in" <expr> ":" <expr> <block>

<stmt-for-expr> ::= "for" <expr> <block>

<stmt-dump> ::= "dump" <expr> ";"

<stmt-return> ::= "return" <expr>? ";"

<stmt-assign> ::= <expr> "=" <expr> ";"

<stmt-expr> ::= <expr> ";"

<expr> ::= <identifier>
         | <boolean>
         | <integer>
         | <expr-bytes>
         | <expr-literal-array>
         | <expr-literal-slice>
         | <expr-grouped>
         | <expr-syscall>
         | <expr-call>
         | <expr-index>
         | <expr-index-slice>
         | <expr-sizeof>
         | <expr-unary>
         | <expr-binary>

<expr-bytes> ::= '"' <literal-bytes-element>* '"'

<bytes-element> ::= "\0"
                  | "\t"
                  | "\n"
                  | '\"'
                  | "\\"
                  | ? printable ASCII character ?

<expr-literal-array> ::= "(" ":" <typespec> ")" "[" (<expr> ("," <expr>)*)? "]"

<expr-literal-slice> ::= "(" ":" <typespec> ")" "{" <expr> "," <expr> "}"

<expr-grouped> ::= "(" <expr> ")"

<expr-syscall> ::= "syscall" "(" <expr> ("," <expr>)* ")"

<expr-call> ::= <expr> "(" (<expr> ("," <expr>)*)? ")"

<expr-index> ::= <expr> "[" <expr> "]"

<expr-slice> ::= <expr> "[" <expr> ":" <expr> "]"

<expr-sizeof> ::= "sizeof" "(" ":" <typespec> ")"

<expr-unary> ::= "not" <expr>
               | "+" <expr>
               | "-" <expr>
               | "~" <expr>
               | "*" <expr>
               | "&" <expr>
               | "countof" "(" <expr> ")"

<expr-binary> ::= <expr> "or" <expr>
                | <expr> "and" <expr>
                | <expr> "==" <expr>
                | <expr> "!=" <expr>
                | <expr> "<=" <expr>
                | <expr> "<" <expr>
                | <expr> ">=" <expr>
                | <expr> ">" <expr>
                | <expr> "+" <expr>
                | <expr> "-" <expr>
                | <expr> "*" <expr>
                | <expr> "/" <expr>
                | <expr> "|" <expr>
                | <expr> "^" <expr>
                | <expr> "&" <expr>

<block> ::= "{" <stmt>* "}"

<parameter-list> ::= ( <parameter> ("," <parameter>)* )?

<parameter> ::= <identifier> ":" <typespec>

<typespec> ::= <typespec-identifier>
             | <typespec-function>
             | <typespec-pointer>
             | <typespec-array>
             | <typespec-slice>
             | <typespec-typeof>

<typespec-identifier> ::= <identifier>

<typespec-function> ::= func "(" ( <typespec> ("," <typespec> )* )? ")" <typespec>

<typespec-pointer> ::= "*" <typespec>

<typespec-array> ::= "[" <expr> "]" <typespec>

<typespec-slice> ::= "[" "]" <typespec>

<typespec-typeof> ::= "typeof" "(" <expr> ")"

<identifier> ::= <letter> (<letter> | <digit-dec>)*

<letter> ::= "A" .. "Z" | "a" .. "z" | "_"

<integer> ::= ("+" | "-")? <integer-number> <integer-suffix>

<integer-number> ::= <integer-number-bin>
                   | <integer-number-oct>
                   | <integer-number-dec>
                   | <integer-number-hex>

<integer-suffix> ::= "y"
                   | "u8"
                   | "s8"
                   | "u16"
                   | "s16"
                   | "u32"
                   | "s32"
                   | "u64"
                   | "s64"
                   | "u"
                   | "s"

<integer-number-bin> ::= "0b" <digit-bin>+
<integer-number-oct> ::= "0o" <digit-oct>+
<integer-number-dec> ::=      <digit-dec>+
<integer-number-hex> ::= "0x" <digit-hex>+

<digit-bin> ::= "0" | "1"
<digit-oct> ::= "0" .. "7"
<digit-dec> ::= "0" .. "9"
<digit-hex> ::= "0" .. "9" | "A" .. "F" | "a" .. "f"

<boolean> ::= "true" | "false"
