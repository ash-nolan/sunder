import "std";

func main() void {
    var allocator = std::general_allocator::init();
    defer {
        allocator.fini();
    }
    var allocator = std::allocator::init[[typeof(allocator)]](&allocator);

    var iter = std::argument_iterator::init();
    iter.advance(); # program name

    iter.advance();
    var lhs = std::bigint::init_from_str(allocator, *iter.current(), 0);
    if lhs.is_error() {
        var cur = *iter.current();
        var err = lhs.error();
        std::print_format_line(
            std::err(),
            "{}: {}",
            (:[]std::formatter)[
                std::formatter::init[[[]byte]](&cur),
                std::formatter::init[[[]byte]](&err)]);
    }
    var lhs = lhs.value();

    iter.advance();
    var rhs = std::bigint::init_from_str(allocator, *iter.current(), 0);
    if rhs.is_error() {
        var cur = *iter.current();
        var err = rhs.error();
        std::print_format_line(
            std::err(),
            "{}: {}",
            (:[]std::formatter)[
                std::formatter::init[[[]byte]](&cur),
                std::formatter::init[[[]byte]](&err)]);
    }
    var rhs = rhs.value();

    std::assert(not iter.advance());

    var res = std::bigint::init(allocator);
    std::bigint::add(&res, &lhs, &rhs);
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[std::bigint]](&res)]);
    std::bigint::sub(&res, &lhs, &rhs);
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[std::bigint]](&res)]);
    std::bigint::mul(&res, &lhs, &rhs);
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[std::bigint]](&res)]);
    std::bigint::div(&res, &lhs, &rhs);
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[std::bigint]](&res)]);
    std::bigint::rem(&res, &lhs, &rhs);
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[std::bigint]](&res)]);
}
