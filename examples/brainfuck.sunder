# Brainfuck interpreter written in Sunder.
#
# See https://esolangs.org/wiki/Brainfuck for an overview of the brainfuck
# language. This implementation uses a 30,000 cell tape with 8-bit wrapping
# cells. No cell update is performed upon reading EOF with the , operation.
import "std";
import "sys";

var cells = (:[30000]u8)[0...];
var stack = (:[4096]usize)[0...];

var cells_index: usize = 0;
var stack_index: usize = 0;

func main() void {
    if sys::argc != 2 {
        var progname = std::cstr::to_bytes(*sys::argv);
        var expected: usize = 1;
        var received: usize = sys::argc - 1;
        std::print_format_line(
            std::err(),
            "{}: invalid number of arguments (expected {}, received {})",
            (:[]std::formatter)[
                std::formatter::init[[[]byte]](&progname),
                std::formatter::init[[usize]](&expected),
                std::formatter::init[[usize]](&received)]);
        std::exit(std::EXIT_FAILURE);
    }

    var path = *std::cptr::add[[*byte]](sys::argv, 1);
    var open_result = std::fs::file::open(std::cstr::to_bytes(path), std::fs::OPEN_READ);
    if open_result.is_error() {
        var p = std::cstr::to_bytes(path);
        var e = open_result.error();
        std::print_format_line(
            std::err(),
            "{}: {}",
            (:[]std::formatter)[
                std::formatter::init[[[]byte]](&p),
                std::formatter::init[[[]byte]](&e)]);
        std::exit(std::EXIT_FAILURE);
    }
    var file = open_result.value();
    var file_reader = std::reader::init[[std::fs::file]](&file);
    var read_result = std::read_all(file_reader, std::page_allocator::the());
    if read_result.is_error() {
        var p = std::cstr::to_bytes(path);
        var e = read_result.error();
        std::print_format_line(
            std::err(),
            "{}: {}",
            (:[]std::formatter)[
                std::formatter::init[[[]byte]](&p),
                std::formatter::init[[[]byte]](&e)]);
        file.close();
        std::exit(std::EXIT_FAILURE);
    }
    var source = read_result.value();
    var source_size: usize = countof(source);

    var reader = std::input();
    var source_index: usize = 0;
    for source_index < source_size {
        var cur: byte = source[source_index];

        if cur == '>' {
            cells_index = cells_index + 1;
            source_index = source_index + 1;
        }
        elif cur == '<' {
            cells_index = cells_index - 1;
            source_index = source_index + 1;
        }
        elif cur == '+' {
            if cells[cells_index] == 0xFF {
                cells[cells_index] = 0x00;
            }
            else {
                cells[cells_index] = cells[cells_index] + 1;
            }
            source_index = source_index + 1;
        }
        elif cur == '-' {
            if cells[cells_index] == 0x00 {
                cells[cells_index] = 0xFF;
            }
            else {
                cells[cells_index] = cells[cells_index] - 1;
            }
            source_index = source_index + 1;
        }
        elif cur == '.' {
            std::print(std::out(), (:[]byte){(:*byte)&cells[cells_index], 1});
            source_index = source_index + 1;
        }
        elif cur == ',' {
            var b: byte = 0;
            var result = reader.read((:[]byte){&b, 1});
            if result.value() != 0 { # Only update on non-EOF.
               cells[cells_index] = (:u8)b;
            }
            source_index = source_index + 1;
        }
        elif cur == '[' {
            if cells[cells_index] == 0 {
                var depth: usize = 1;
                for depth > 0 {
                    source_index = source_index + 1;
                    if source[source_index] == '[' {
                        depth = depth + 1;
                    }
                    if source[source_index] == ']' {
                        depth = depth - 1;
                    }
                }
                source_index = source_index + 1;
            } else {
                stack[stack_index] = source_index;
                stack_index = stack_index + 1;
                source_index = source_index + 1;
            }
        }
        elif cur == ']' {
            stack_index = stack_index - 1;
            source_index = stack[stack_index];
        }
        else {
            source_index = source_index + 1;
        }
    }

    std::delete_slice[[byte]](std::page_allocator::the(), source);
    file.close();
}
