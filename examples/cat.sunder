# Simplified (non-POSIX-compliant) version of `cat`.
import "std";
import "sys";

func cat(filename: []byte) void {
    var result = std::file::open(filename, std::OPEN_READ);
    if result.is_error() {
        var error = result.error();
        std::print_format_line(
            std::err(),
            "{}: {}",
            (:[]std::formatter)[
                std::formatter::init[[[]byte]](&filename),
                std::formatter::init[[[]byte]](&error)]);
        std::exit(std::EXIT_FAILURE);
    }

    var file = result.value();
    defer {
        file.close();
    }

    var buf: [512]byte = (:[512]byte)[0...];
    for true {
        var result = file.read(buf[0:countof(buf)]);
        if result.is_error() {
            var error = result.error();
            std::print_format_line(
                std::err(),
                "{}: {}",
                (:[]std::formatter)[
                    std::formatter::init[[[]byte]](&filename),
                    std::formatter::init[[[]byte]](&error)]);
            std::exit(std::EXIT_FAILURE);
        }

        if result.value() == 0 {
            break;
        }

        std::print(std::out(), buf[0:result.value()]);
    }
}

func main() void {
    for i in 1:sys::argc {
        var arg: *byte = *std::cptr::add[[*byte]](sys::argv, i);
        cat(std::cstr::to_bytes(arg));
    }
}
