import "std";
import "sys";

func cat(filename: *byte) void {
    var filename_str: std::str = std::str::init(std::cstr::to_bytes(filename));

    var open_result = std::fs::file::open(filename_str.bytes, std::fs::OPEN_READ);
    if open_result.is_error() {
        var error = std::str::init(open_result.error());
        std::print_format_line(
            std::err(),
            "{}: {}",
            (:[]std::formatter)[
                std::formatter::init[[std::str]](&filename_str),
                std::formatter::init[[std::str]](&error)]);
        std::exit(std::EXIT_FAILURE);
    }

    var file = open_result.value();

    var buf: [512]byte = (:[512]byte)[0...];
    for true {
        var read_result = file.read(buf[0:countof(buf)]);
        if read_result.is_error() {
            var error = std::str::init(read_result.error());
            std::print_format_line(
                std::err(),
                "{}: {}",
                (:[]std::formatter)[
                    std::formatter::init[[std::str]](&filename_str),
                    std::formatter::init[[std::str]](&error)]);
            std::exit(std::EXIT_FAILURE);
        }

        if read_result.value() == 0 {
            break;
        }

        std::print(std::out(), buf[0:countof(buf)]);
    }

    file.close();
}

func main() void {
    for i in 1:sys::argc {
        var filename: *byte = *std::cptr::add[[*byte]](sys::argv, i);
        cat(filename);
    }
}
