import "std";
import "sys/sys.sunder";

func cat(filename: *byte) void {
    var filename_str: std::str = std::str::init(std::cstr::to_bytes(filename));
    var sysret: ssize = sys::open(filename, sys::O_RDONLY, 0);

    if sysret < 0 {
        std::print_format_line(
            std::err(),
            "{}: failed to open file",
            (:[]std::formatter)[
                std::formatter::init[[:std::str]](&filename_str)]);
        sys::exit(1);
    }

    var fd: u32 = (:u32)sysret;
    var buf: [512]byte = (:[512]byte)[0...];
    for true {
        sysret = sys::read(fd, &buf[0], countof(buf));
        if sysret < 0 {
            std::print_format_line(
                std::err(),
                "{}: read error",
                (:[]std::formatter)[
                    std::formatter::init[[:std::str]](&filename_str)]);
            sys::exit(1);
        }

        if sysret == 0 {
            break;
        }

        sysret = sys::write(sys::STDOUT_FILENO, &buf[0], (:usize)sysret);
        if sysret < 0 {
            std::print_format_line(
                std::err(),
                "{}: write error",
                (:[]std::formatter)[
                    std::formatter::init[[:std::str]](&filename_str)]);
            sys::exit(1);
        }
    }

    sys::close(fd);
}

func main() void {
    for i in 1:sys::argc {
        var filename: *byte = *std::cptr::add[[:*byte]](sys::argv, i);
        cat(filename);
    }
}
