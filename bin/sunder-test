#!/bin/sh
set -e

PROGNAME=$(basename "$0")
usage() {
    cat <<EOF
Usage: ${PROGNAME} [FILE...]

Options:
  -h        Display usage information and exit.
EOF
}

for _ in "$@"; do
case "$1" in
    -h)
        usage
        exit 0
        ;;
    *)
        ;;
esac
done

TESTSRUN=0
FAILURES=0

contains() {
    CONTAINS_STR="$1" # input string
    CONTAINS_SUB="$2" # target substring
    if [ "${CONTAINS_STR#*${CONTAINS_SUB}}" != "${CONTAINS_STR}" ]; then
        return 0 # Input string contains target substring.
    fi
    return 1 # Input string does not contain target substring.
}

test() {
    TEST="$1"

    echo "[= TEST ${TEST} =]"

    # XXX: Hack that allows conditionally skipping tests that would fail when
    # compiled with a backend that does not support features exercised by that
    # particular test.
    if >/dev/null grep -i '#.*only SUNDER_BACKEND=C' "${TEST}" \
    && ! sunder-compile -e | >/dev/null grep -i 'SUNDER_BACKEND=C'; then
        echo '[= SKIP =]'
        return 0
    fi

    set +e
    RECEIVED=$(\
        cd "$(dirname "${TEST}")" 2>&1 && \
        "${SUNDER_HOME}/bin/sunder-run" "$(basename "${TEST}")" 2>&1)
    set -e

    EXPECTED=$(\
        sed -n '/^########\(#\)*/,$p' "${TEST}" |\
        sed '1d' |\
        sed 's/^# \?//g')

    if [ "${EXPECTED}" = "${RECEIVED}" ]; then
        echo '[= PASS =]'
    else
        TMPDIR=$(mktemp -d)
        trap '{ rm -rf -- "${TMPDIR}"; }' EXIT
        printf '%s\n' "${EXPECTED}" >"${TMPDIR}/expected"
        printf '%s\n' "${RECEIVED}" >"${TMPDIR}/received"
        diff "${TMPDIR}/expected" "${TMPDIR}/received" || true
        echo '[= FAIL =]'
        FAILURES=$((FAILURES + 1))
    fi
    TESTSRUN=$((TESTSRUN + 1))
}

TESTS= # empty
if [ "$#" -ne 0 ]; then
    for arg in "$@"; do
        if [ -d "$(realpath ${arg})" ]; then
            FILES=$(find "$(realpath ${arg})" -name '*.test.sunder' | sort)
            TESTS=$(echo "${TESTS}" "${FILES}")
        else
            TESTS=$(echo "${TESTS}" "${arg}")
        fi
    done
else
    TESTS=$(find . -name '*.test.sunder' | sort)
fi

for t in ${TESTS}; do
    test "${t}"
done

echo "TESTS RUN => ${TESTSRUN}"
echo "FAILURES  => ${FAILURES}"

[ "${FAILURES}" -eq 0 ] || exit 1
