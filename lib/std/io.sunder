namespace std;
import "std/result.sunder";
import "std/writer.sunder";
import "sys/sys.sunder";

struct stream {
    var fd: ssize;

    func write(self: *stream, bytes: []byte) std::result[[:usize, :[]byte]] {
        if countof(bytes) == 0 {
            return std::result[[:usize, :[]byte]]::init_value(0);
        }

        var sysret: ssize = sys::write((:u32)self.*.fd, &bytes[0u], countof(bytes));
        if sysret < 0 {
            return std::result[[:usize, :[]byte]]::init_error(
                sys::ERRNO_STRINGS[(:usize)-sysret]
            );
        }

        return std::result[[:usize, :[]byte]]::init_value((:usize)sysret);
    }

    func print(self: *stream, bytes: []byte) void {
        var writer: std::writer = std::writer::init[[:std::stream]](self);
        var result: std::result[[:usize, :[]byte]] = writer.write_all(bytes);
        if result.is_error() {
            std::panic(result.error());
        }
    }

    func println(self: *stream, bytes: []byte) void {
        self.*.print(bytes);
        self.*.print("\n");
    }
}

const out: stream = (:stream){.fd = (:ssize)sys::STDOUT_FILENO};
const err: stream = (:stream){.fd = (:ssize)sys::STDERR_FILENO};
