namespace std;
import "std/result.sunder";
import "sys/sys.sunder";

func print(bytes: []byte) void {
    if countof(bytes) == 0 {
        return;
    }
    sys::write(sys::STDOUT_FILENO, &bytes[0u], countof(bytes));
}

func println(bytes: []byte) void {
    print(bytes);
    print("\n");
}

func eprint(bytes: []byte) void {
    if countof(bytes) == 0 {
        return;
    }
    sys::write(sys::STDERR_FILENO, &bytes[0u], countof(bytes));
}

func eprintln(bytes: []byte) void {
    eprint(bytes);
    eprint("\n");
}

struct stream {
    var fd: ssize;

    const STDOUT_FD: ssize = (:ssize)sys::STDOUT_FILENO;
    const STDERR_FD: ssize = (:ssize)sys::STDERR_FILENO;

    func write(self: *stream, bytes: []byte) std::result[[:usize, :[]byte]] {
        if countof(bytes) == 0 {
            return std::result[[:usize, :[]byte]]::init_value(0);
        }

        var sysret: ssize =
            sys::write((:u32)self.*.fd, &bytes[0u], countof(bytes));
        if sysret < 0 {
            return std::result[[:usize, :[]byte]]::init_error(
                sys::ERRNO_STRINGS[(:usize)-sysret]
            );
        }

        return std::result[[:usize, :[]byte]]::init_value((:usize)sysret);
    }
}

const stdout: stream = (:stream){.fd = stream::STDOUT_FD};
const stderr: stream = (:stream){.fd = stream::STDERR_FD};
