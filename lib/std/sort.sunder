namespace std;
import "std/core.sunder";

func merge_sort[[T]](slice: []T, allocator: std::allocator) void {
    if countof(slice) <= 1 {
        return;
    }

    var slice0 = std::slice[[T]]::new(allocator, countof(slice)/2);
    var slice1 = std::slice[[T]]::new(allocator, countof(slice) - countof(slice)/2);
    defer {
        std::slice[[T]]::delete(allocator, slice0);
        std::slice[[T]]::delete(allocator, slice1);
    }
    std::slice[[T]]::copy(slice0, slice[0:countof(slice)/2]);
    std::slice[[T]]::copy(slice1, slice[countof(slice)/2:countof(slice)]);

    merge_sort[[T]](slice0, allocator);
    merge_sort[[T]](slice1, allocator);

    var i0 = 0u;
    var i1 = 0u;
    for i in countof(slice) {
        if i0 == countof(slice0) {
            slice[i] = slice1[i1];
            i1 = i1 + 1;
        }
        elif i1 == countof(slice1) {
            slice[i] = slice0[i0];
            i0 = i0 + 1;
        }
        elif std::compare[[T]](&slice0[i0], &slice1[i1]) < 0 {
            slice[i] = slice0[i0];
            i0 = i0 + 1;
        }
        else {
            slice[i] = slice1[i1];
            i1 = i1 + 1;
        }
    }
}
