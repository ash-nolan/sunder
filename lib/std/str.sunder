namespace std::str;
import "std/core.sunder";

func starts_with(str: []byte, target: []byte) bool {
    if countof(str) < countof(target) {
        return false;
    }

    for i in 0:countof(target) {
        if str[i] != target[i] {
            return false;
        }
    }

    return true;
}

func ends_with(str: []byte, target: []byte) bool {
    if countof(str) < countof(target) {
        return false;
    }

    var start = countof(str) - countof(target);
    for i in 0:countof(target) {
        if str[start+i] != target[i] {
            return false;
        }
    }

    return true;
}

func contains(str: []byte, target: []byte) bool {
    if countof(str) < countof(target) {
        return false;
    }

    var start = 0u;
    for start <= (countof(str) - countof(target)) {
        var i = 0u;
        for i < countof(target) {
            if str[start+i] != target[i] {
                break;
            }
            i = i + 1;
        }

        if i == countof(target) {
            return true;
        }
        start = start + i + 1;
    }

    return false;
}

func eq(lhs: []byte, rhs: []byte) bool {
    return lhs.compare(&rhs) == 0;
}

func ne(lhs: []byte, rhs: []byte) bool {
    return lhs.compare(&rhs) != 0;
}

func lt(lhs: []byte, rhs: []byte) bool {
    return lhs.compare(&rhs) < 0;
}

func le(lhs: []byte, rhs: []byte) bool {
    return lhs.compare(&rhs) <= 0;
}

func gt(lhs: []byte, rhs: []byte) bool {
    return lhs.compare(&rhs) > 0;
}

func ge(lhs: []byte, rhs: []byte) bool {
    return lhs.compare(&rhs) >= 0;
}
