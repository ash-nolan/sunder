namespace std;
import "std/core.sunder";

# Allocator that will never successfully allocate, reallocate, or free memory.
# The purpose of this allocator is to provide a type that may be used as the
# allocator member for constants of a managed type such as `std::bigint`. The
# members constants `ITABLE`, `OBJECT`, and `ALLOCATOR` are provided to
# explicitly support using the null allocator for constant definitions.
struct null_allocator {
    func allocate(self_: *null_allocator, align_: usize, size_: usize) std::result[[*byte, std::error]] {
        return std::result[[*byte, std::error]]::init_error(std::error::ALLOCATION_FAILURE);
    }

    func reallocate(self_: *null_allocator, ptr_: *byte, align_: usize, old_size_: usize, new_size_: usize) std::result[[*byte, std::error]] {
        std::panic("attempted null_allocator reallocation");
        return std::result[[*byte, std::error]]::init_error(std::error::ALLOCATION_FAILURE);
    }

    func deallocate(self_: *null_allocator, ptr_: *byte, align_: usize, size_: usize) void {
        std::panic("attempted null_allocator deallocation");
    }

    func the() *null_allocator {
        const the = (:null_allocator){};
        return &the;
    }

    const ITABLE: std::allocator_itable = (:std::allocator_itable){
        .allocate = null_allocator::allocate,
        .reallocate = null_allocator::reallocate,
        .deallocate = null_allocator::deallocate
    };

    const OBJECT: std::null_allocator = (:std::null_allocator){};

    const ALLOCATOR: std::allocator = (:std::allocator){
        .itable = &null_allocator::ITABLE,
        .object = &null_allocator::OBJECT
    };
}
