# Linux x86-64 System Interface
namespace sys;

# C Type             | Size | Alignment | Sunder Type
# -------------------+------+-----------+------------
# char               | 1    | 1         | byte
# signed   char      | 1    | 1         | s8
# unsigned char      | 1    | 1         | u8
# signed   short     | 2    | 2         | s16
# unsigned short     | 2    | 2         | u16
# signed   int       | 4    | 4         | s32
# unsigned int       | 4    | 4         | u32
# signed   long      | 8    | 8         | ssize
# unsigned long      | 8    | 8         | usize
# signed   long long | 8    | 8         | s64
# unsigned long long | 8    | 8         | u64
#
# POSIX types obtainted through GDB:
# mode_t  : type = unsigned int
# off_t   : type = long int
# size_t  : type = long unsigned int
# ssize_t : type = long int

alias smax = s64;
alias umax = u64;

alias char      = byte;
alias schar     = s8;
alias uchar     = u8;
alias sshort    = s16;
alias ushort    = u16;
alias sint      = s32;
alias uint      = u32;
alias slong     = ssize;
alias ulong     = usize;
alias slonglong = s64;
alias ulonglong = u64;

alias mode_t  = uint;
alias off_t   = slong;
alias size_t  = ulong;
alias ssize_t = slong;

let ERRORS = (:[][]byte)[
    "[system error 0] Undefined errno value",
    "[system error EPERM] Operation not permitted",
    "[system error ENOENT] No such file or directory",
    "[system error ESRCH] No such process",
    "[system error EINTR] Interrupted system call",
    "[system error EIO] Input/output error",
    "[system error ENXIO] No such device or address",
    "[system error E2BIG] Argument list too long",
    "[system error ENOEXEC] Exec format error",
    "[system error EBADF] Bad file descriptor",
    "[system error ECHILD] No child processes",
    "[system error EAGAIN] Resource temporarily unavailable",
    "[system error ENOMEM] Cannot allocate memory",
    "[system error EACCES] Permission denied",
    "[system error EFAULT] Bad address",
    "[system error ENOTBLK] Block device required",
    "[system error EBUSY] Device or resource busy",
    "[system error EEXIST] File exists",
    "[system error EXDEV] Invalid cross-device link",
    "[system error ENODEV] No such device",
    "[system error ENOTDIR] Not a directory",
    "[system error EISDIR] Is a directory",
    "[system error EINVAL] Invalid argument",
    "[system error ENFILE] Too many open files in system",
    "[system error EMFILE] Too many open files",
    "[system error ENOTTY] Inappropriate ioctl for device",
    "[system error ETXTBSY] Text file busy",
    "[system error EFBIG] File too large",
    "[system error ENOSPC] No space left on device",
    "[system error ESPIPE] Illegal seek",
    "[system error EROFS] Read-only file system",
    "[system error EMLINK] Too many links",
    "[system error EPIPE] Broken pipe",
    "[system error EDOM] Numerical argument out of domain",
    "[system error ERANGE] Numerical result out of range",
    "[system error EDEADLK] Resource deadlock avoided",
    "[system error ENAMETOOLONG] File name too long",
    "[system error ENOLCK] No locks available",
    "[system error ENOSYS] Function not implemented",
    "[system error ENOTEMPTY] Directory not empty",
    "[system error ELOOP] Too many levels of symbolic links",
    "[system error 41] Undefined errno value",
    "[system error ENOMSG] No message of desired type",
    "[system error EIDRM] Identifier removed",
    "[system error ECHRNG] Channel number out of range",
    "[system error EL2NSYNC] Level 2 not synchronized",
    "[system error EL3HLT] Level 3 halted",
    "[system error EL3RST] Level 3 reset",
    "[system error ELNRNG] Link number out of range",
    "[system error EUNATCH] Protocol driver not attached",
    "[system error ENOCSI] No CSI structure available",
    "[system error EL2HLT] Level 2 halted",
    "[system error EBADE] Invalid exchange",
    "[system error EBADR] Invalid request descriptor",
    "[system error EXFULL] Exchange full",
    "[system error ENOANO] No anode",
    "[system error EBADRQC] Invalid request code",
    "[system error EBADSLT] Invalid slot",
    "[system error 58] Undefined errno value",
    "[system error EBFONT] Bad font file format",
    "[system error ENOSTR] Device not a stream",
    "[system error ENODATA] No data available",
    "[system error ETIME] Timer expired",
    "[system error ENOSR] Out of streams resources",
    "[system error ENONET] Machine is not on the network",
    "[system error ENOPKG] Package not installed",
    "[system error EREMOTE] Object is remote",
    "[system error ENOLINK] Link has been severed",
    "[system error EADV] Advertise error",
    "[system error ESRMNT] Srmount error",
    "[system error ECOMM] Communication error on send",
    "[system error EPROTO] Protocol error",
    "[system error EMULTIHOP] Multihop attempted",
    "[system error EDOTDOT] RFS specific error",
    "[system error EBADMSG] Bad message",
    "[system error EOVERFLOW] Value too large for defined data type",
    "[system error ENOTUNIQ] Name not unique on network",
    "[system error EBADFD] File descriptor in bad state",
    "[system error EREMCHG] Remote address changed",
    "[system error ELIBACC] Can not access a needed shared library",
    "[system error ELIBBAD] Accessing a corrupted shared library",
    "[system error ELIBSCN] .lib section in a.out corrupted",
    "[system error ELIBMAX] Attempting to link in too many shared libraries",
    "[system error ELIBEXEC] Cannot exec a shared library directly",
    "[system error EILSEQ] Invalid or incomplete multibyte or wide character",
    "[system error ERESTART] Interrupted system call should be restarted",
    "[system error ESTRPIPE] Streams pipe error",
    "[system error EUSERS] Too many users",
    "[system error ENOTSOCK] Socket operation on non-socket",
    "[system error EDESTADDRREQ] Destination address required",
    "[system error EMSGSIZE] Message too long",
    "[system error EPROTOTYPE] Protocol wrong type for socket",
    "[system error ENOPROTOOPT] Protocol not available",
    "[system error EPROTONOSUPPORT] Protocol not supported",
    "[system error ESOCKTNOSUPPORT] Socket type not supported",
    "[system error EOPNOTSUPP] Operation not supported",
    "[system error EPFNOSUPPORT] Protocol family not supported",
    "[system error EAFNOSUPPORT] Address family not supported by protocol",
    "[system error EADDRINUSE] Address already in use",
    "[system error EADDRNOTAVAIL] Cannot assign requested address",
    "[system error ENETDOWN] Network is down",
    "[system error ENETUNREACH] Network is unreachable",
    "[system error ENETRESET] Network dropped connection on reset",
    "[system error ECONNABORTED] Software caused connection abort",
    "[system error ECONNRESET] Connection reset by peer",
    "[system error ENOBUFS] No buffer space available",
    "[system error EISCONN] Transport endpoint is already connected",
    "[system error ENOTCONN] Transport endpoint is not connected",
    "[system error ESHUTDOWN] Cannot send after transport endpoint shutdown",
    "[system error ETOOMANYREFS] Too many references: cannot splice",
    "[system error ETIMEDOUT] Connection timed out",
    "[system error ECONNREFUSED] Connection refused",
    "[system error EHOSTDOWN] Host is down",
    "[system error EHOSTUNREACH] No route to host",
    "[system error EALREADY] Operation already in progress",
    "[system error EINPROGRESS] Operation now in progress",
    "[system error ESTALE] Stale file handle",
    "[system error EUCLEAN] Structure needs cleaning",
    "[system error ENOTNAM] Not a XENIX named type file",
    "[system error ENAVAIL] No XENIX semaphores available",
    "[system error EISNAM] Is a named type file",
    "[system error EREMOTEIO] Remote I/O error",
    "[system error EDQUOT] Disk quota exceeded",
    "[system error ENOMEDIUM] No medium found",
    "[system error EMEDIUMTYPE] Wrong medium type",
    "[system error ECANCELED] Operation canceled",
    "[system error ENOKEY] Required key not available",
    "[system error EKEYEXPIRED] Key has expired",
    "[system error EKEYREVOKED] Key has been revoked",
    "[system error EKEYREJECTED] Key was rejected by service",
    "[system error EOWNERDEAD] Owner died",
    "[system error ENOTRECOVERABLE] State not recoverable",
    "[system error ERFKILL] Operation not possible due to RF-kill",
    "[system error EHWPOISON] Memory page has hardware error"
];

# Transform an errno value into an `std::error`-compatible pointer.
func error(errno: ssize) *[]byte {
    if errno < 0 or (:usize)errno >= countof(ERRORS) {
        let UNKNOWN = "Unknown system error";
        return &UNKNOWN;
    }
    return &sys::ERRORS[(:usize)errno];
}

let STDIN_FILENO:  sint = 0;
let STDOUT_FILENO: sint = 1;
let STDERR_FILENO: sint = 2;

let O_RDONLY:    sint = 0x00000000;
let O_WRONLY:    sint = 0x00000001;
let O_RDWR:      sint = 0x00000002;
let O_CREAT:     sint = 0x00000040;
let O_TRUNC:     sint = 0x00000200;
let O_APPEND:    sint = 0x00000400;
let O_CLOEXEC:   sint = 0x00080000;
let O_DIRECTORY: sint = 0x00010000;

let SEEK_SET: sint = 0x0;
let SEEK_CUR: sint = 0x1;
let SEEK_END: sint = 0x2;

# linux/include/uapi/linux/limits.h:
let NAME_MAX: usize =  255; # chars in a file name
let PATH_MAX: usize = 4096; # chars in a path name including nul

# linux/include/linux/dirent.h:
### struct linux_dirent64 {
###     uint64_t       d_ino;
###     int64_t        d_off;
###     unsigned short d_reclen;
###     unsigned char  d_type;
###     char           d_name[];
### };
struct dirent64 {
    var d_ino: u64;
    var d_off: s64;
    var d_reclen: ushort;
    var d_type: uchar;
    var d_name: [0]char;
}
alias dirent = dirent64;

extern func read(fd: sint, buf: *char, count: size_t) ssize;
extern func write(fd: sint, buf: *char, count: size_t) ssize;
extern func open(filename: *char, flags: sint, mode: mode_t) ssize;
extern func close(fd: sint) ssize;
extern func lseek(fd: sint, offset: off_t, whence: sint) ssize;
extern func exit(error_code: sint) void;
extern func mkdir(pathname: *byte, mode: mode_t) ssize;
extern func rmdir(pathname: *byte) ssize;
extern func unlink(pathname: *byte) ssize;
extern func getdents(fd: sint, dirent: *dirent, count: size_t) ssize;

extern var argc: usize;
extern var argv: **byte;
extern var envp: **byte;

extern func allocate(align: usize, size: usize) *any;
extern func deallocate(ptr: *any, align: usize, size: usize) void;

extern func dump_bytes(addr: *any, size: usize) void;
func dump[[T]](object: T) void {
    dump_bytes(&object, sizeof(T));
}

extern func str_to_f32(out: *f32, start: *byte, count: usize) bool;
extern func str_to_f64(out: *f64, start: *byte, count: usize) bool;

extern func f32_to_str(buf: *byte, f: f32) bool;
extern func f64_to_str(buf: *byte, f: f64) bool;

extern func f32_abs(x: f32) f32;
extern func f32_min(x: f32, y: f32) f32;
extern func f32_max(x: f32, y: f32) f32;

extern func f64_abs(x: f64) f64;
extern func f64_min(x: f64, y: f64) f64;
extern func f64_max(x: f64, y: f64) f64;

# Exponential Functions
extern func f32_ln(x: f32) f32;
extern func f32_log2(x: f32) f32;
extern func f32_log10(x: f32) f32;

extern func f64_ln(x: f64) f64;
extern func f64_log2(x: f64) f64;
extern func f64_log10(x: f64) f64;

# Power Functions
extern func f32_sqrt(x: f32) f32;
extern func f32_cbrt(x: f32) f32;
extern func f32_hypot(x: f32, y: f32) f32;
extern func f32_pow(base: f32, exponent: f32) f32;

extern func f64_sqrt(x: f64) f64;
extern func f64_cbrt(x: f64) f64;
extern func f64_hypot(x: f64, y: f64) f64;
extern func f64_pow(base: f64, exponent: f64) f64;

# Trigonometric Functions
extern func f32_sin(x: f32) f32;
extern func f32_cos(x: f32) f32;
extern func f32_tan(x: f32) f32;
extern func f32_asin(x: f32) f32;
extern func f32_acos(x: f32) f32;
extern func f32_atan(x: f32) f32;
extern func f32_atan2(y: f32, x: f32) f32;

extern func f64_sin(x: f64) f64;
extern func f64_cos(x: f64) f64;
extern func f64_tan(x: f64) f64;
extern func f64_asin(x: f64) f64;
extern func f64_acos(x: f64) f64;
extern func f64_atan(x: f64) f64;
extern func f64_atan2(y: f64, x: f64) f64;

# Hyperbolic Functions
extern func f32_sinh(x: f32) f32;
extern func f32_cosh(x: f32) f32;
extern func f32_tanh(x: f32) f32;
extern func f32_asinh(x: f32) f32;
extern func f32_acosh(x: f32) f32;
extern func f32_atanh(x: f32) f32;

extern func f64_sinh(x: f64) f64;
extern func f64_cosh(x: f64) f64;
extern func f64_tanh(x: f64) f64;
extern func f64_asinh(x: f64) f64;
extern func f64_acosh(x: f64) f64;
extern func f64_atanh(x: f64) f64;

# Rounding Functions
extern func f32_ceil(x: f32) f32;
extern func f32_floor(x: f32) f32;
extern func f32_trunc(x: f32) f32;
extern func f32_round(x: f32) f32;

extern func f64_ceil(x: f64) f64;
extern func f64_floor(x: f64) f64;
extern func f64_trunc(x: f64) f64;
extern func f64_round(x: f64) f64;

# Classification Functions
extern func f32_is_finite(x: f32) bool;
extern func f32_is_normal(x: f32) bool;
extern func f32_is_inf(x: f32) bool;
extern func f32_is_nan(x: f32) bool;

extern func f64_is_finite(x: f64) bool;
extern func f64_is_normal(x: f64) bool;
extern func f64_is_inf(x: f64) bool;
extern func f64_is_nan(x: f64) bool;
