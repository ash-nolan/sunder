# Linux Kernel x86-64 System Interface
# ====================================
#
# System V x86-64 (LP64) ABI:
# C Type             | Size | Alignment | Sunder Type
# -------------------+------+-----------+------------
# char               | 1    | 1         | byte
# signed   char      | 1    | 1         | s8
# unsigned char      | 1    | 1         | u8
# signed   short     | 2    | 2         | s16
# unsigned short     | 2    | 2         | u16
# signed   int       | 4    | 4         | s32
# unsigned int       | 4    | 4         | u32
# signed   long      | 8    | 8         | ssize
# unsigned long      | 8    | 8         | usize
# signed   long long | 8    | 8         | s64
# unsigned long long | 8    | 8         | u64
#
# linux/include/linux/types.h:
# typedef unsigned short        umode_t;
namespace sys;

const SYS_READ:   ssize = 0s;
const SYS_WRITE:  ssize = 1s;
const SYS_OPEN:   ssize = 2s;
const SYS_CLOSE:  ssize = 3s;
const SYS_MMAP:   ssize = 9s;
const SYS_MUNMAP: ssize = 11s;
const SYS_EXIT:   ssize = 60s;

const EPERM:           ssize = 1;
const ENOENT:          ssize = 2;
const ESRCH:           ssize = 3;
const EINTR:           ssize = 4;
const EIO:             ssize = 5;
const ENXIO:           ssize = 6;
const E2BIG:           ssize = 7;
const ENOEXEC:         ssize = 8;
const EBADF:           ssize = 9;
const ECHILD:          ssize = 10;
const EAGAIN:          ssize = 11;
const ENOMEM:          ssize = 12;
const EACCES:          ssize = 13;
const EFAULT:          ssize = 14;
const ENOTBLK:         ssize = 15;
const EBUSY:           ssize = 16;
const EEXIST:          ssize = 17;
const EXDEV:           ssize = 18;
const ENODEV:          ssize = 19;
const ENOTDIR:         ssize = 20;
const EISDIR:          ssize = 21;
const EINVAL:          ssize = 22;
const ENFILE:          ssize = 23;
const EMFILE:          ssize = 24;
const ENOTTY:          ssize = 25;
const ETXTBSY:         ssize = 26;
const EFBIG:           ssize = 27;
const ENOSPC:          ssize = 28;
const ESPIPE:          ssize = 29;
const EROFS:           ssize = 30;
const EMLINK:          ssize = 31;
const EPIPE:           ssize = 32;
const EDOM:            ssize = 33;
const ERANGE:          ssize = 34;
const EDEADLK:         ssize = 35;
const ENAMETOOLONG:    ssize = 36;
const ENOLCK:          ssize = 37;
const ENOSYS:          ssize = 38;
const ENOTEMPTY:       ssize = 39;
const ELOOP:           ssize = 40;
const ENOMSG:          ssize = 42;
const EIDRM:           ssize = 43;
const ECHRNG:          ssize = 44;
const EL2NSYNC:        ssize = 45;
const EL3HLT:          ssize = 46;
const EL3RST:          ssize = 47;
const ELNRNG:          ssize = 48;
const EUNATCH:         ssize = 49;
const ENOCSI:          ssize = 50;
const EL2HLT:          ssize = 51;
const EBADE:           ssize = 52;
const EBADR:           ssize = 53;
const EXFULL:          ssize = 54;
const ENOANO:          ssize = 55;
const EBADRQC:         ssize = 56;
const EBADSLT:         ssize = 57;
const EBFONT:          ssize = 59;
const ENOSTR:          ssize = 60;
const ENODATA:         ssize = 61;
const ETIME:           ssize = 62;
const ENOSR:           ssize = 63;
const ENONET:          ssize = 64;
const ENOPKG:          ssize = 65;
const EREMOTE:         ssize = 66;
const ENOLINK:         ssize = 67;
const EADV:            ssize = 68;
const ESRMNT:          ssize = 69;
const ECOMM:           ssize = 70;
const EPROTO:          ssize = 71;
const EMULTIHOP:       ssize = 72;
const EDOTDOT:         ssize = 73;
const EBADMSG:         ssize = 74;
const EOVERFLOW:       ssize = 75;
const ENOTUNIQ:        ssize = 76;
const EBADFD:          ssize = 77;
const EREMCHG:         ssize = 78;
const ELIBACC:         ssize = 79;
const ELIBBAD:         ssize = 80;
const ELIBSCN:         ssize = 81;
const ELIBMAX:         ssize = 82;
const ELIBEXEC:        ssize = 83;
const EILSEQ:          ssize = 84;
const ERESTART:        ssize = 85;
const ESTRPIPE:        ssize = 86;
const EUSERS:          ssize = 87;
const ENOTSOCK:        ssize = 88;
const EDESTADDRREQ:    ssize = 89;
const EMSGSIZE:        ssize = 90;
const EPROTOTYPE:      ssize = 91;
const ENOPROTOOPT:     ssize = 92;
const EPROTONOSUPPORT: ssize = 93;
const ESOCKTNOSUPPORT: ssize = 94;
const EOPNOTSUPP:      ssize = 95;
const EPFNOSUPPORT:    ssize = 96;
const EAFNOSUPPORT:    ssize = 97;
const EADDRINUSE:      ssize = 98;
const EADDRNOTAVAIL:   ssize = 99;
const ENETDOWN:        ssize = 100;
const ENETUNREACH:     ssize = 101;
const ENETRESET:       ssize = 102;
const ECONNABORTED:    ssize = 103;
const ECONNRESET:      ssize = 104;
const ENOBUFS:         ssize = 105;
const EISCONN:         ssize = 106;
const ENOTCONN:        ssize = 107;
const ESHUTDOWN:       ssize = 108;
const ETOOMANYREFS:    ssize = 109;
const ETIMEDOUT:       ssize = 110;
const ECONNREFUSED:    ssize = 111;
const EHOSTDOWN:       ssize = 112;
const EHOSTUNREACH:    ssize = 113;
const EALREADY:        ssize = 114;
const EINPROGRESS:     ssize = 115;
const ESTALE:          ssize = 116;
const EUCLEAN:         ssize = 117;
const ENOTNAM:         ssize = 118;
const ENAVAIL:         ssize = 119;
const EISNAM:          ssize = 120;
const EREMOTEIO:       ssize = 121;
const EDQUOT:          ssize = 122;
const ENOMEDIUM:       ssize = 123;
const EMEDIUMTYPE:     ssize = 124;
const ECANCELED:       ssize = 125;
const ENOKEY:          ssize = 126;
const EKEYEXPIRED:     ssize = 127;
const EKEYREVOKED:     ssize = 128;
const EKEYREJECTED:    ssize = 129;
const EOWNERDEAD:      ssize = 130;
const ENOTRECOVERABLE: ssize = 131;
const ERFKILL:         ssize = 132;
const EHWPOISON:       ssize = 133;

const ERRNO_STRINGS: [134][]byte = (:[134][]byte)[
    "Undefined errno value",                             # Undefined errno value (0)
    "Operation not permitted",                           # EPERM (1)
    "No such file or directory",                         # ENOENT (2)
    "No such process",                                   # ESRCH (3)
    "Interrupted system call",                           # EINTR (4)
    "Input/output error",                                # EIO (5)
    "No such device or address",                         # ENXIO (6)
    "Argument list too long",                            # E2BIG (7)
    "Exec format error",                                 # ENOEXEC (8)
    "Bad file descriptor",                               # EBADF (9)
    "No child processes",                                # ECHILD (10)
    "Resource temporarily unavailable",                  # EAGAIN (11)
    "Cannot allocate memory",                            # ENOMEM (12)
    "Permission denied",                                 # EACCES (13)
    "Bad address",                                       # EFAULT (14)
    "Block device required",                             # ENOTBLK (15)
    "Device or resource busy",                           # EBUSY (16)
    "File exists",                                       # EEXIST (17)
    "Invalid cross-device link",                         # EXDEV (18)
    "No such device",                                    # ENODEV (19)
    "Not a directory",                                   # ENOTDIR (20)
    "Is a directory",                                    # EISDIR (21)
    "Invalid argument",                                  # EINVAL (22)
    "Too many open files in system",                     # ENFILE (23)
    "Too many open files",                               # EMFILE (24)
    "Inappropriate ioctl for device",                    # ENOTTY (25)
    "Text file busy",                                    # ETXTBSY (26)
    "File too large",                                    # EFBIG (27)
    "No space left on device",                           # ENOSPC (28)
    "Illegal seek",                                      # ESPIPE (29)
    "Read-only file system",                             # EROFS (30)
    "Too many links",                                    # EMLINK (31)
    "Broken pipe",                                       # EPIPE (32)
    "Numerical argument out of domain",                  # EDOM (33)
    "Numerical result out of range",                     # ERANGE (34)
    "Resource deadlock avoided",                         # EDEADLK (35)
    "File name too long",                                # ENAMETOOLONG (36)
    "No locks available",                                # ENOLCK (37)
    "Function not implemented",                          # ENOSYS (38)
    "Directory not empty",                               # ENOTEMPTY (39)
    "Too many levels of symbolic links",                 # ELOOP (40)
    "Undefined errno value",                             # Undefined errno value (41)
    "No message of desired type",                        # ENOMSG (42)
    "Identifier removed",                                # EIDRM (43)
    "Channel number out of range",                       # ECHRNG (44)
    "Level 2 not synchronized",                          # EL2NSYNC (45)
    "Level 3 halted",                                    # EL3HLT (46)
    "Level 3 reset",                                     # EL3RST (47)
    "Link number out of range",                          # ELNRNG (48)
    "Protocol driver not attached",                      # EUNATCH (49)
    "No CSI structure available",                        # ENOCSI (50)
    "Level 2 halted",                                    # EL2HLT (51)
    "Invalid exchange",                                  # EBADE (52)
    "Invalid request descriptor",                        # EBADR (53)
    "Exchange full",                                     # EXFULL (54)
    "No anode",                                          # ENOANO (55)
    "Invalid request code",                              # EBADRQC (56)
    "Invalid slot",                                      # EBADSLT (57)
    "Undefined errno value",                             # Undefined errno value (58)
    "Bad font file format",                              # EBFONT (59)
    "Device not a stream",                               # ENOSTR (60)
    "No data available",                                 # ENODATA (61)
    "Timer expired",                                     # ETIME (62)
    "Out of streams resources",                          # ENOSR (63)
    "Machine is not on the network",                     # ENONET (64)
    "Package not installed",                             # ENOPKG (65)
    "Object is remote",                                  # EREMOTE (66)
    "Link has been severed",                             # ENOLINK (67)
    "Advertise error",                                   # EADV (68)
    "Srmount error",                                     # ESRMNT (69)
    "Communication error on send",                       # ECOMM (70)
    "Protocol error",                                    # EPROTO (71)
    "Multihop attempted",                                # EMULTIHOP (72)
    "RFS specific error",                                # EDOTDOT (73)
    "Bad message",                                       # EBADMSG (74)
    "Value too large for defined data type",             # EOVERFLOW (75)
    "Name not unique on network",                        # ENOTUNIQ (76)
    "File descriptor in bad state",                      # EBADFD (77)
    "Remote address changed",                            # EREMCHG (78)
    "Can not access a needed shared library",            # ELIBACC (79)
    "Accessing a corrupted shared library",              # ELIBBAD (80)
    ".lib section in a.out corrupted",                   # ELIBSCN (81)
    "Attempting to link in too many shared libraries",   # ELIBMAX (82)
    "Cannot exec a shared library directly",             # ELIBEXEC (83)
    "Invalid or incomplete multibyte or wide character", # EILSEQ (84)
    "Interrupted system call should be restarted",       # ERESTART (85)
    "Streams pipe error",                                # ESTRPIPE (86)
    "Too many users",                                    # EUSERS (87)
    "Socket operation on non-socket",                    # ENOTSOCK (88)
    "Destination address required",                      # EDESTADDRREQ (89)
    "Message too long",                                  # EMSGSIZE (90)
    "Protocol wrong type for socket",                    # EPROTOTYPE (91)
    "Protocol not available",                            # ENOPROTOOPT (92)
    "Protocol not supported",                            # EPROTONOSUPPORT (93)
    "Socket type not supported",                         # ESOCKTNOSUPPORT (94)
    "Operation not supported",                           # EOPNOTSUPP (95)
    "Protocol family not supported",                     # EPFNOSUPPORT (96)
    "Address family not supported by protocol",          # EAFNOSUPPORT (97)
    "Address already in use",                            # EADDRINUSE (98)
    "Cannot assign requested address",                   # EADDRNOTAVAIL (99)
    "Network is down",                                   # ENETDOWN (100)
    "Network is unreachable",                            # ENETUNREACH (101)
    "Network dropped connection on reset",               # ENETRESET (102)
    "Software caused connection abort",                  # ECONNABORTED (103)
    "Connection reset by peer",                          # ECONNRESET (104)
    "No buffer space available",                         # ENOBUFS (105)
    "Transport endpoint is already connected",           # EISCONN (106)
    "Transport endpoint is not connected",               # ENOTCONN (107)
    "Cannot send after transport endpoint shutdown",     # ESHUTDOWN (108)
    "Too many references: cannot splice",                # ETOOMANYREFS (109)
    "Connection timed out",                              # ETIMEDOUT (110)
    "Connection refused",                                # ECONNREFUSED (111)
    "Host is down",                                      # EHOSTDOWN (112)
    "No route to host",                                  # EHOSTUNREACH (113)
    "Operation already in progress",                     # EALREADY (114)
    "Operation now in progress",                         # EINPROGRESS (115)
    "Stale file handle",                                 # ESTALE (116)
    "Structure needs cleaning",                          # EUCLEAN (117)
    "Not a XENIX named type file",                       # ENOTNAM (118)
    "No XENIX semaphores available",                     # ENAVAIL (119)
    "Is a named type file",                              # EISNAM (120)
    "Remote I/O error",                                  # EREMOTEIO (121)
    "Disk quota exceeded",                               # EDQUOT (122)
    "No medium found",                                   # ENOMEDIUM (123)
    "Wrong medium type",                                 # EMEDIUMTYPE (124)
    "Operation canceled",                                # ECANCELED (125)
    "Required key not available",                        # ENOKEY (126)
    "Key has expired",                                   # EKEYEXPIRED (127)
    "Key has been revoked",                              # EKEYREVOKED (128)
    "Key was rejected by service",                       # EKEYREJECTED (129)
    "Owner died",                                        # EOWNERDEAD (130)
    "State not recoverable",                             # ENOTRECOVERABLE (131)
    "Operation not possible due to RF-kill",             # ERFKILL (132)
    "Memory page has hardware error"                     # EHWPOISON (133)
];

const STDIN_FILENO:  u32 = 0u32;
const STDOUT_FILENO: u32 = 1u32;
const STDERR_FILENO: u32 = 2u32;

const O_RDONLY:    s32 = 0x00000000s32;
const O_WRONLY:    s32 = 0x00000001s32;
const O_RDWR:      s32 = 0x00000002s32;
const O_CREAT:     s32 = 0x00000040s32;
const O_EXCL:      s32 = 0x00000080s32;
const O_NOCTTY:    s32 = 0x00000100s32;
const O_TRUNC:     s32 = 0x00000200s32;
const O_APPEND:    s32 = 0x00000400s32;
const O_CLOEXEC:   s32 = 0x00080000s32;
const O_DIRECTORY: s32 = 0x00010000s32;
const O_NOFOLLOW:  s32 = 0x00020000s32;
const O_NONBLOCK:  s32 = 0x00000800s32;
const O_DSYNC:     s32 = 0x00001000s32;
const O_RSYNC:     s32 = 0x00101000s32;
const O_SYNC:      s32 = 0x00101000s32;

const S_IRWXU: u16 = 0o700u16;
const S_IRUSR: u16 = 0o400u16;
const S_IWUSR: u16 = 0o200u16;
const S_IXUSR: u16 = 0o100u16;

const S_IRWXG: u16 = 0o070u16;
const S_IRGRP: u16 = 0o040u16;
const S_IWGRP: u16 = 0o020u16;
const S_IXGRP: u16 = 0o010u16;

const S_IRWXO: u16 = 0o007u16;
const S_IROTH: u16 = 0o004u16;
const S_IWOTH: u16 = 0o002u16;
const S_IXOTH: u16 = 0o001u16;

const PROT_NONE:  ssize = 0x0s;
const PROT_READ:  ssize = 0x1s;
const PROT_WRITE: ssize = 0x2s;
const PROT_EXEC:  ssize = 0x4s;

const MAP_SHARED:    ssize = 0x01s;
const MAP_PRIVATE:   ssize = 0x02s;
const MAP_FIXED:     ssize = 0x10s;
const MAP_ANONYMOUS: ssize = 0x20s;

# linux/include/uapi/linux/limits.h:
const NGROUPS_MAX:    usize =  65536; # supplemental group IDs are available
const ARG_MAX:        usize = 131072; # # bytes of args + environ for exec()
const LINK_MAX:       usize =    127; # # links a file may have
const MAX_CANON:      usize =    255; # size of the canonical input queue
const MAX_INPUT:      usize =    255; # size of the type-ahead buffer
const NAME_MAX:       usize =    255; # # chars in a file name
const PATH_MAX:       usize =   4096; # # chars in a path name including nul
const PIPE_BUF:       usize =   4096; # # bytes in atomic write to a pipe
const XATTR_NAME_MAX: usize =    255; # # chars in an extended attribute name
const XATTR_SIZE_MAX: usize =  65536; # size of an extended attribute value (64k)
const XATTR_LIST_MAX: usize =  65536; # size of extended attribute namelist (64k)

# linux/arch/x86/include/asm/page_types.h
# PAGE_SIZE is defined in terms of PAGE_SHIFT (12 on x86 and x64).
const PAGE_SIZE: usize = 4096;

# linux/fs/read_write.c:
# SYSCALL_DEFINE3(read, unsigned int, fd, char __user *, buf, size_t, count)
func read(fd: u32, buf: *byte, count: usize) ssize {
    return syscall(SYS_READ, fd, buf, count);
}

# linux/fs/read_write.c:
# SYSCALL_DEFINE3(write, unsigned int, fd, const char __user *, buf, size_t, count)
func write(fd: u32, buf: *byte, count: usize) ssize {
    return syscall(SYS_WRITE, fd, buf, count);
}

# linux/fs/open.c:
# SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, umode_t, mode)
func open(filename: *byte, flags: s32, mode: u16) ssize {
    return syscall(SYS_OPEN, filename, flags, mode);
}

# linux/fs/open.c:
# SYSCALL_DEFINE1(close, unsigned int, fd)
func close(fd: u32) ssize {
    return syscall(SYS_CLOSE, fd);
}

# arch/x86/kernel/sys_x86_64.c
# SYSCALL_DEFINE6(mmap, unsigned long, addr, unsigned long, len, unsigned long, prot, unsigned long, flags, unsigned long, fd, unsigned long, off)
func mmap(addr: usize, len: usize, prot: ssize, flags: ssize, fd: usize, off: usize) ssize {
    return syscall(SYS_MMAP, addr, len, prot, flags, fd, off);
}

# linux/mm/mmap.c
# SYSCALL_DEFINE2(munmap, unsigned long, addr, size_t, len)
func munmap(addr: usize, len: usize) ssize {
    return syscall(SYS_MUNMAP, addr, len);
}

# linux/kernel/exit.c:
# SYSCALL_DEFINE1(exit, int, error_code)
func exit(error_code: s32) void {
    syscall(SYS_EXIT, error_code);
}

extern var argc: usize;
extern var argv: **byte;
