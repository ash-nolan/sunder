# Linux Kernel x86-64 System Interface
namespace sys;

# System V x86-64 (LP64) ABI:
# C Type             | Size | Alignment | Sunder Type
# -------------------+------+-----------+------------
# char               | 1    | 1         | byte
# signed   char      | 1    | 1         | s8
# unsigned char      | 1    | 1         | u8
# signed   short     | 2    | 2         | s16
# unsigned short     | 2    | 2         | u16
# signed   int       | 4    | 4         | s32
# unsigned int       | 4    | 4         | u32
# signed   long      | 8    | 8         | ssize
# unsigned long      | 8    | 8         | usize
# signed   long long | 8    | 8         | s64
# unsigned long long | 8    | 8         | u64
#
# POSIX types obtainted through GDB `whatis` on x64 Linux:
# mode_t  : type = unsigned int
# off_t   : type = long
# size_t  : type = unsigned long
# ssize_t : type = long

alias smax = s64;
alias umax = u64;

alias char      = byte;
alias schar     = s8;
alias uchar     = u8;
alias sshort    = s16;
alias ushort    = u16;
alias sint      = s32;
alias uint      = u32;
alias slong     = ssize;
alias ulong     = usize;
alias slonglong = s64;
alias ulonglong = u64;

alias mode_t      = uint;
alias off_t       = slong;
alias size_t      = ulong;
alias ssize_t     = slong;

const EPERM:           ssize = 1;
const ENOENT:          ssize = 2;
const ESRCH:           ssize = 3;
const EINTR:           ssize = 4;
const EIO:             ssize = 5;
const ENXIO:           ssize = 6;
const E2BIG:           ssize = 7;
const ENOEXEC:         ssize = 8;
const EBADF:           ssize = 9;
const ECHILD:          ssize = 10;
const EAGAIN:          ssize = 11;
const ENOMEM:          ssize = 12;
const EACCES:          ssize = 13;
const EFAULT:          ssize = 14;
const ENOTBLK:         ssize = 15;
const EBUSY:           ssize = 16;
const EEXIST:          ssize = 17;
const EXDEV:           ssize = 18;
const ENODEV:          ssize = 19;
const ENOTDIR:         ssize = 20;
const EISDIR:          ssize = 21;
const EINVAL:          ssize = 22;
const ENFILE:          ssize = 23;
const EMFILE:          ssize = 24;
const ENOTTY:          ssize = 25;
const ETXTBSY:         ssize = 26;
const EFBIG:           ssize = 27;
const ENOSPC:          ssize = 28;
const ESPIPE:          ssize = 29;
const EROFS:           ssize = 30;
const EMLINK:          ssize = 31;
const EPIPE:           ssize = 32;
const EDOM:            ssize = 33;
const ERANGE:          ssize = 34;
const EDEADLK:         ssize = 35;
const ENAMETOOLONG:    ssize = 36;
const ENOLCK:          ssize = 37;
const ENOSYS:          ssize = 38;
const ENOTEMPTY:       ssize = 39;
const ELOOP:           ssize = 40;
const ENOMSG:          ssize = 42;
const EIDRM:           ssize = 43;
const ECHRNG:          ssize = 44;
const EL2NSYNC:        ssize = 45;
const EL3HLT:          ssize = 46;
const EL3RST:          ssize = 47;
const ELNRNG:          ssize = 48;
const EUNATCH:         ssize = 49;
const ENOCSI:          ssize = 50;
const EL2HLT:          ssize = 51;
const EBADE:           ssize = 52;
const EBADR:           ssize = 53;
const EXFULL:          ssize = 54;
const ENOANO:          ssize = 55;
const EBADRQC:         ssize = 56;
const EBADSLT:         ssize = 57;
const EBFONT:          ssize = 59;
const ENOSTR:          ssize = 60;
const ENODATA:         ssize = 61;
const ETIME:           ssize = 62;
const ENOSR:           ssize = 63;
const ENONET:          ssize = 64;
const ENOPKG:          ssize = 65;
const EREMOTE:         ssize = 66;
const ENOLINK:         ssize = 67;
const EADV:            ssize = 68;
const ESRMNT:          ssize = 69;
const ECOMM:           ssize = 70;
const EPROTO:          ssize = 71;
const EMULTIHOP:       ssize = 72;
const EDOTDOT:         ssize = 73;
const EBADMSG:         ssize = 74;
const EOVERFLOW:       ssize = 75;
const ENOTUNIQ:        ssize = 76;
const EBADFD:          ssize = 77;
const EREMCHG:         ssize = 78;
const ELIBACC:         ssize = 79;
const ELIBBAD:         ssize = 80;
const ELIBSCN:         ssize = 81;
const ELIBMAX:         ssize = 82;
const ELIBEXEC:        ssize = 83;
const EILSEQ:          ssize = 84;
const ERESTART:        ssize = 85;
const ESTRPIPE:        ssize = 86;
const EUSERS:          ssize = 87;
const ENOTSOCK:        ssize = 88;
const EDESTADDRREQ:    ssize = 89;
const EMSGSIZE:        ssize = 90;
const EPROTOTYPE:      ssize = 91;
const ENOPROTOOPT:     ssize = 92;
const EPROTONOSUPPORT: ssize = 93;
const ESOCKTNOSUPPORT: ssize = 94;
const EOPNOTSUPP:      ssize = 95;
const EPFNOSUPPORT:    ssize = 96;
const EAFNOSUPPORT:    ssize = 97;
const EADDRINUSE:      ssize = 98;
const EADDRNOTAVAIL:   ssize = 99;
const ENETDOWN:        ssize = 100;
const ENETUNREACH:     ssize = 101;
const ENETRESET:       ssize = 102;
const ECONNABORTED:    ssize = 103;
const ECONNRESET:      ssize = 104;
const ENOBUFS:         ssize = 105;
const EISCONN:         ssize = 106;
const ENOTCONN:        ssize = 107;
const ESHUTDOWN:       ssize = 108;
const ETOOMANYREFS:    ssize = 109;
const ETIMEDOUT:       ssize = 110;
const ECONNREFUSED:    ssize = 111;
const EHOSTDOWN:       ssize = 112;
const EHOSTUNREACH:    ssize = 113;
const EALREADY:        ssize = 114;
const EINPROGRESS:     ssize = 115;
const ESTALE:          ssize = 116;
const EUCLEAN:         ssize = 117;
const ENOTNAM:         ssize = 118;
const ENAVAIL:         ssize = 119;
const EISNAM:          ssize = 120;
const EREMOTEIO:       ssize = 121;
const EDQUOT:          ssize = 122;
const ENOMEDIUM:       ssize = 123;
const EMEDIUMTYPE:     ssize = 124;
const ECANCELED:       ssize = 125;
const ENOKEY:          ssize = 126;
const EKEYEXPIRED:     ssize = 127;
const EKEYREVOKED:     ssize = 128;
const EKEYREJECTED:    ssize = 129;
const EOWNERDEAD:      ssize = 130;
const ENOTRECOVERABLE: ssize = 131;
const ERFKILL:         ssize = 132;
const EHWPOISON:       ssize = 133;

const ERRORS = (:[][]byte)[
    "[system error 0] Undefined errno value",
    "[system error EPERM] Operation not permitted",
    "[system error ENOENT] No such file or directory",
    "[system error ESRCH] No such process",
    "[system error EINTR] Interrupted system call",
    "[system error EIO] Input/output error",
    "[system error ENXIO] No such device or address",
    "[system error E2BIG] Argument list too long",
    "[system error ENOEXEC] Exec format error",
    "[system error EBADF] Bad file descriptor",
    "[system error ECHILD] No child processes",
    "[system error EAGAIN] Resource temporarily unavailable",
    "[system error ENOMEM] Cannot allocate memory",
    "[system error EACCES] Permission denied",
    "[system error EFAULT] Bad address",
    "[system error ENOTBLK] Block device required",
    "[system error EBUSY] Device or resource busy",
    "[system error EEXIST] File exists",
    "[system error EXDEV] Invalid cross-device link",
    "[system error ENODEV] No such device",
    "[system error ENOTDIR] Not a directory",
    "[system error EISDIR] Is a directory",
    "[system error EINVAL] Invalid argument",
    "[system error ENFILE] Too many open files in system",
    "[system error EMFILE] Too many open files",
    "[system error ENOTTY] Inappropriate ioctl for device",
    "[system error ETXTBSY] Text file busy",
    "[system error EFBIG] File too large",
    "[system error ENOSPC] No space left on device",
    "[system error ESPIPE] Illegal seek",
    "[system error EROFS] Read-only file system",
    "[system error EMLINK] Too many links",
    "[system error EPIPE] Broken pipe",
    "[system error EDOM] Numerical argument out of domain",
    "[system error ERANGE] Numerical result out of range",
    "[system error EDEADLK] Resource deadlock avoided",
    "[system error ENAMETOOLONG] File name too long",
    "[system error ENOLCK] No locks available",
    "[system error ENOSYS] Function not implemented",
    "[system error ENOTEMPTY] Directory not empty",
    "[system error ELOOP] Too many levels of symbolic links",
    "[system error 41] Undefined errno value",
    "[system error ENOMSG] No message of desired type",
    "[system error EIDRM] Identifier removed",
    "[system error ECHRNG] Channel number out of range",
    "[system error EL2NSYNC] Level 2 not synchronized",
    "[system error EL3HLT] Level 3 halted",
    "[system error EL3RST] Level 3 reset",
    "[system error ELNRNG] Link number out of range",
    "[system error EUNATCH] Protocol driver not attached",
    "[system error ENOCSI] No CSI structure available",
    "[system error EL2HLT] Level 2 halted",
    "[system error EBADE] Invalid exchange",
    "[system error EBADR] Invalid request descriptor",
    "[system error EXFULL] Exchange full",
    "[system error ENOANO] No anode",
    "[system error EBADRQC] Invalid request code",
    "[system error EBADSLT] Invalid slot",
    "[system error 58] Undefined errno value",
    "[system error EBFONT] Bad font file format",
    "[system error ENOSTR] Device not a stream",
    "[system error ENODATA] No data available",
    "[system error ETIME] Timer expired",
    "[system error ENOSR] Out of streams resources",
    "[system error ENONET] Machine is not on the network",
    "[system error ENOPKG] Package not installed",
    "[system error EREMOTE] Object is remote",
    "[system error ENOLINK] Link has been severed",
    "[system error EADV] Advertise error",
    "[system error ESRMNT] Srmount error",
    "[system error ECOMM] Communication error on send",
    "[system error EPROTO] Protocol error",
    "[system error EMULTIHOP] Multihop attempted",
    "[system error EDOTDOT] RFS specific error",
    "[system error EBADMSG] Bad message",
    "[system error EOVERFLOW] Value too large for defined data type",
    "[system error ENOTUNIQ] Name not unique on network",
    "[system error EBADFD] File descriptor in bad state",
    "[system error EREMCHG] Remote address changed",
    "[system error ELIBACC] Can not access a needed shared library",
    "[system error ELIBBAD] Accessing a corrupted shared library",
    "[system error ELIBSCN] .lib section in a.out corrupted",
    "[system error ELIBMAX] Attempting to link in too many shared libraries",
    "[system error ELIBEXEC] Cannot exec a shared library directly",
    "[system error EILSEQ] Invalid or incomplete multibyte or wide character",
    "[system error ERESTART] Interrupted system call should be restarted",
    "[system error ESTRPIPE] Streams pipe error",
    "[system error EUSERS] Too many users",
    "[system error ENOTSOCK] Socket operation on non-socket",
    "[system error EDESTADDRREQ] Destination address required",
    "[system error EMSGSIZE] Message too long",
    "[system error EPROTOTYPE] Protocol wrong type for socket",
    "[system error ENOPROTOOPT] Protocol not available",
    "[system error EPROTONOSUPPORT] Protocol not supported",
    "[system error ESOCKTNOSUPPORT] Socket type not supported",
    "[system error EOPNOTSUPP] Operation not supported",
    "[system error EPFNOSUPPORT] Protocol family not supported",
    "[system error EAFNOSUPPORT] Address family not supported by protocol",
    "[system error EADDRINUSE] Address already in use",
    "[system error EADDRNOTAVAIL] Cannot assign requested address",
    "[system error ENETDOWN] Network is down",
    "[system error ENETUNREACH] Network is unreachable",
    "[system error ENETRESET] Network dropped connection on reset",
    "[system error ECONNABORTED] Software caused connection abort",
    "[system error ECONNRESET] Connection reset by peer",
    "[system error ENOBUFS] No buffer space available",
    "[system error EISCONN] Transport endpoint is already connected",
    "[system error ENOTCONN] Transport endpoint is not connected",
    "[system error ESHUTDOWN] Cannot send after transport endpoint shutdown",
    "[system error ETOOMANYREFS] Too many references: cannot splice",
    "[system error ETIMEDOUT] Connection timed out",
    "[system error ECONNREFUSED] Connection refused",
    "[system error EHOSTDOWN] Host is down",
    "[system error EHOSTUNREACH] No route to host",
    "[system error EALREADY] Operation already in progress",
    "[system error EINPROGRESS] Operation now in progress",
    "[system error ESTALE] Stale file handle",
    "[system error EUCLEAN] Structure needs cleaning",
    "[system error ENOTNAM] Not a XENIX named type file",
    "[system error ENAVAIL] No XENIX semaphores available",
    "[system error EISNAM] Is a named type file",
    "[system error EREMOTEIO] Remote I/O error",
    "[system error EDQUOT] Disk quota exceeded",
    "[system error ENOMEDIUM] No medium found",
    "[system error EMEDIUMTYPE] Wrong medium type",
    "[system error ECANCELED] Operation canceled",
    "[system error ENOKEY] Required key not available",
    "[system error EKEYEXPIRED] Key has expired",
    "[system error EKEYREVOKED] Key has been revoked",
    "[system error EKEYREJECTED] Key was rejected by service",
    "[system error EOWNERDEAD] Owner died",
    "[system error ENOTRECOVERABLE] State not recoverable",
    "[system error ERFKILL] Operation not possible due to RF-kill",
    "[system error EHWPOISON] Memory page has hardware error"
];

# Transform an errno value into an `std::error`-compatible pointer.
func error(errno: ssize) *[]byte {
    if errno < 0 or (:usize)errno >= countof(ERRORS) {
        const UNKNOWN = "Unknown system error";
        return &UNKNOWN;
    }
    return &sys::ERRORS[(:usize)errno];
}

const STDIN_FILENO:  sint = 0;
const STDOUT_FILENO: sint = 1;
const STDERR_FILENO: sint = 2;

const O_RDONLY:    sint = 0x00000000;
const O_WRONLY:    sint = 0x00000001;
const O_RDWR:      sint = 0x00000002;
const O_CREAT:     sint = 0x00000040;
const O_TRUNC:     sint = 0x00000200;
const O_APPEND:    sint = 0x00000400;
const O_CLOEXEC:   sint = 0x00080000;
const O_DIRECTORY: sint = 0x00010000;

const SEEK_SET: uint = 0x0;
const SEEK_CUR: uint = 0x1;
const SEEK_END: uint = 0x2;

const PROT_NONE:  ulong = 0x0;
const PROT_READ:  ulong = 0x1;
const PROT_WRITE: ulong = 0x2;
const PROT_EXEC:  ulong = 0x4;

const MAP_SHARED:    ulong = 0x01;
const MAP_PRIVATE:   ulong = 0x02;
const MAP_FIXED:     ulong = 0x10;
const MAP_ANONYMOUS: ulong = 0x20;

# linux/include/uapi/linux/limits.h:
const NAME_MAX: usize =  255; # chars in a file name
const PATH_MAX: usize = 4096; # chars in a path name including nul

# linux/arch/x86/include/asm/page_types.h:
# PAGE_SIZE is defined in terms of PAGE_SHIFT (12 on x86 and x64).
const PAGE_SIZE: usize = 4096;

# linux/fs/readdir.c:
### struct linux_dirent {
###     unsigned long   d_ino;
###     unsigned long   d_off;
###     unsigned short  d_reclen;
###     char            d_name[1];
### };
struct dirent {
    var d_ino: ulong;
    var d_off: ulong;
    var d_reclen: ushort;
    var d_name: byte;
}

extern func read(fd: sint, buf: *char, count: usize) ssize;
extern func write(fd: sint, buf: *char, count: usize) ssize;
extern func open(filename: *char, flags: sint, mode: mode_t) ssize;
extern func close(fd: sint) ssize;
extern func lseek(fd: sint, offset: off_t, whence: uint) ssize;
extern func mmap(addr: ulong, len: ulong, prot: ulong, flags: ulong, fd: ulong, off: ulong) ssize;
extern func munmap(addr: ulong, len: usize) ssize;
extern func exit(error_code: sint) void;
extern func getdents(fd: sint, dirent: *dirent, count: uint) ssize;
extern func mkdir(pathname: *byte, mode: mode_t) ssize;
extern func rmdir(pathname: *byte) ssize;
extern func unlink(pathname: *byte) ssize;

extern var argc: usize;
extern var argv: **byte;
extern var envp: **byte;

extern func _dump(object_addr: *any, object_size: usize) void;
func dump[[T]](object: T) void {
    _dump(&object, sizeof(T));
}
