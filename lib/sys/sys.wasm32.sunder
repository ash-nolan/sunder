# Emscripten Wasm32 System Interface
namespace sys;

alias smax = s64;
alias umax = u64;

alias char      = byte;
alias schar     = s8;
alias uchar     = u8;
alias sshort    = s16;
alias ushort    = u16;
alias sint      = s32;
alias uint      = u32;
alias slong     = ssize;
alias ulong     = usize;
alias slonglong = s64;
alias ulonglong = u64;

alias ino_t   = ulonglong;
alias mode_t  = uint;
alias off_t   = slonglong;
alias size_t  = ulong;
alias ssize_t = slong;

# emscripten/system/lib/libc/musl/arch/generic/bits/errno.h
let EPERM:           ssize = 1;
let ENOENT:          ssize = 2;
let ESRCH:           ssize = 3;
let EINTR:           ssize = 4;
let EIO:             ssize = 5;
let ENXIO:           ssize = 6;
let E2BIG:           ssize = 7;
let ENOEXEC:         ssize = 8;
let EBADF:           ssize = 9;
let ECHILD:          ssize = 10;
let EAGAIN:          ssize = 11;
let ENOMEM:          ssize = 12;
let EACCES:          ssize = 13;
let EFAULT:          ssize = 14;
let ENOTBLK:         ssize = 15;
let EBUSY:           ssize = 16;
let EEXIST:          ssize = 17;
let EXDEV:           ssize = 18;
let ENODEV:          ssize = 19;
let ENOTDIR:         ssize = 20;
let EISDIR:          ssize = 21;
let EINVAL:          ssize = 22;
let ENFILE:          ssize = 23;
let EMFILE:          ssize = 24;
let ENOTTY:          ssize = 25;
let ETXTBSY:         ssize = 26;
let EFBIG:           ssize = 27;
let ENOSPC:          ssize = 28;
let ESPIPE:          ssize = 29;
let EROFS:           ssize = 30;
let EMLINK:          ssize = 31;
let EPIPE:           ssize = 32;
let EDOM:            ssize = 33;
let ERANGE:          ssize = 34;
let EDEADLK:         ssize = 35;
let ENAMETOOLONG:    ssize = 36;
let ENOLCK:          ssize = 37;
let ENOSYS:          ssize = 38;
let ENOTEMPTY:       ssize = 39;
let ELOOP:           ssize = 40;
let ENOMSG:          ssize = 42;
let EIDRM:           ssize = 43;
let ECHRNG:          ssize = 44;
let EL2NSYNC:        ssize = 45;
let EL3HLT:          ssize = 46;
let EL3RST:          ssize = 47;
let ELNRNG:          ssize = 48;
let EUNATCH:         ssize = 49;
let ENOCSI:          ssize = 50;
let EL2HLT:          ssize = 51;
let EBADE:           ssize = 52;
let EBADR:           ssize = 53;
let EXFULL:          ssize = 54;
let ENOANO:          ssize = 55;
let EBADRQC:         ssize = 56;
let EBADSLT:         ssize = 57;
let EBFONT:          ssize = 59;
let ENOSTR:          ssize = 60;
let ENODATA:         ssize = 61;
let ETIME:           ssize = 62;
let ENOSR:           ssize = 63;
let ENONET:          ssize = 64;
let ENOPKG:          ssize = 65;
let EREMOTE:         ssize = 66;
let ENOLINK:         ssize = 67;
let EADV:            ssize = 68;
let ESRMNT:          ssize = 69;
let ECOMM:           ssize = 70;
let EPROTO:          ssize = 71;
let EMULTIHOP:       ssize = 72;
let EDOTDOT:         ssize = 73;
let EBADMSG:         ssize = 74;
let EOVERFLOW:       ssize = 75;
let ENOTUNIQ:        ssize = 76;
let EBADFD:          ssize = 77;
let EREMCHG:         ssize = 78;
let ELIBACC:         ssize = 79;
let ELIBBAD:         ssize = 80;
let ELIBSCN:         ssize = 81;
let ELIBMAX:         ssize = 82;
let ELIBEXEC:        ssize = 83;
let EILSEQ:          ssize = 84;
let ERESTART:        ssize = 85;
let ESTRPIPE:        ssize = 86;
let EUSERS:          ssize = 87;
let ENOTSOCK:        ssize = 88;
let EDESTADDRREQ:    ssize = 89;
let EMSGSIZE:        ssize = 90;
let EPROTOTYPE:      ssize = 91;
let ENOPROTOOPT:     ssize = 92;
let EPROTONOSUPPORT: ssize = 93;
let ESOCKTNOSUPPORT: ssize = 94;
let EOPNOTSUPP:      ssize = 95;
let EPFNOSUPPORT:    ssize = 96;
let EAFNOSUPPORT:    ssize = 97;
let EADDRINUSE:      ssize = 98;
let EADDRNOTAVAIL:   ssize = 99;
let ENETDOWN:        ssize = 100;
let ENETUNREACH:     ssize = 101;
let ENETRESET:       ssize = 102;
let ECONNABORTED:    ssize = 103;
let ECONNRESET:      ssize = 104;
let ENOBUFS:         ssize = 105;
let EISCONN:         ssize = 106;
let ENOTCONN:        ssize = 107;
let ESHUTDOWN:       ssize = 108;
let ETOOMANYREFS:    ssize = 109;
let ETIMEDOUT:       ssize = 110;
let ECONNREFUSED:    ssize = 111;
let EHOSTDOWN:       ssize = 112;
let EHOSTUNREACH:    ssize = 113;
let EALREADY:        ssize = 114;
let EINPROGRESS:     ssize = 115;
let ESTALE:          ssize = 116;
let EUCLEAN:         ssize = 117;
let ENOTNAM:         ssize = 118;
let ENAVAIL:         ssize = 119;
let EISNAM:          ssize = 120;
let EREMOTEIO:       ssize = 121;
let EDQUOT:          ssize = 122;
let ENOMEDIUM:       ssize = 123;
let EMEDIUMTYPE:     ssize = 124;
let ECANCELED:       ssize = 125;
let ENOKEY:          ssize = 126;
let EKEYEXPIRED:     ssize = 127;
let EKEYREVOKED:     ssize = 128;
let EKEYREJECTED:    ssize = 129;
let EOWNERDEAD:      ssize = 130;
let ENOTRECOVERABLE: ssize = 131;
let ERFKILL:         ssize = 132;
let EHWPOISON:       ssize = 133;

# emscripten/system/lib/libc/musl/src/errno/__strerror.h
# These system error definitions are still generated using errno(1) on Linux
# even though Emscripten provides errno constants in the file listed above.
let ERRORS = (:[][]byte)[
    "[system error 0] Undefined errno value",
    "[system error EPERM] Operation not permitted",
    "[system error ENOENT] No such file or directory",
    "[system error ESRCH] No such process",
    "[system error EINTR] Interrupted system call",
    "[system error EIO] Input/output error",
    "[system error ENXIO] No such device or address",
    "[system error E2BIG] Argument list too long",
    "[system error ENOEXEC] Exec format error",
    "[system error EBADF] Bad file descriptor",
    "[system error ECHILD] No child processes",
    "[system error EAGAIN] Resource temporarily unavailable",
    "[system error ENOMEM] Cannot allocate memory",
    "[system error EACCES] Permission denied",
    "[system error EFAULT] Bad address",
    "[system error ENOTBLK] Block device required",
    "[system error EBUSY] Device or resource busy",
    "[system error EEXIST] File exists",
    "[system error EXDEV] Invalid cross-device link",
    "[system error ENODEV] No such device",
    "[system error ENOTDIR] Not a directory",
    "[system error EISDIR] Is a directory",
    "[system error EINVAL] Invalid argument",
    "[system error ENFILE] Too many open files in system",
    "[system error EMFILE] Too many open files",
    "[system error ENOTTY] Inappropriate ioctl for device",
    "[system error ETXTBSY] Text file busy",
    "[system error EFBIG] File too large",
    "[system error ENOSPC] No space left on device",
    "[system error ESPIPE] Illegal seek",
    "[system error EROFS] Read-only file system",
    "[system error EMLINK] Too many links",
    "[system error EPIPE] Broken pipe",
    "[system error EDOM] Numerical argument out of domain",
    "[system error ERANGE] Numerical result out of range",
    "[system error EDEADLK] Resource deadlock avoided",
    "[system error ENAMETOOLONG] File name too long",
    "[system error ENOLCK] No locks available",
    "[system error ENOSYS] Function not implemented",
    "[system error ENOTEMPTY] Directory not empty",
    "[system error ELOOP] Too many levels of symbolic links",
    "[system error 41] Undefined errno value",
    "[system error ENOMSG] No message of desired type",
    "[system error EIDRM] Identifier removed",
    "[system error ECHRNG] Channel number out of range",
    "[system error EL2NSYNC] Level 2 not synchronized",
    "[system error EL3HLT] Level 3 halted",
    "[system error EL3RST] Level 3 reset",
    "[system error ELNRNG] Link number out of range",
    "[system error EUNATCH] Protocol driver not attached",
    "[system error ENOCSI] No CSI structure available",
    "[system error EL2HLT] Level 2 halted",
    "[system error EBADE] Invalid exchange",
    "[system error EBADR] Invalid request descriptor",
    "[system error EXFULL] Exchange full",
    "[system error ENOANO] No anode",
    "[system error EBADRQC] Invalid request code",
    "[system error EBADSLT] Invalid slot",
    "[system error 58] Undefined errno value",
    "[system error EBFONT] Bad font file format",
    "[system error ENOSTR] Device not a stream",
    "[system error ENODATA] No data available",
    "[system error ETIME] Timer expired",
    "[system error ENOSR] Out of streams resources",
    "[system error ENONET] Machine is not on the network",
    "[system error ENOPKG] Package not installed",
    "[system error EREMOTE] Object is remote",
    "[system error ENOLINK] Link has been severed",
    "[system error EADV] Advertise error",
    "[system error ESRMNT] Srmount error",
    "[system error ECOMM] Communication error on send",
    "[system error EPROTO] Protocol error",
    "[system error EMULTIHOP] Multihop attempted",
    "[system error EDOTDOT] RFS specific error",
    "[system error EBADMSG] Bad message",
    "[system error EOVERFLOW] Value too large for defined data type",
    "[system error ENOTUNIQ] Name not unique on network",
    "[system error EBADFD] File descriptor in bad state",
    "[system error EREMCHG] Remote address changed",
    "[system error ELIBACC] Can not access a needed shared library",
    "[system error ELIBBAD] Accessing a corrupted shared library",
    "[system error ELIBSCN] .lib section in a.out corrupted",
    "[system error ELIBMAX] Attempting to link in too many shared libraries",
    "[system error ELIBEXEC] Cannot exec a shared library directly",
    "[system error EILSEQ] Invalid or incomplete multibyte or wide character",
    "[system error ERESTART] Interrupted system call should be restarted",
    "[system error ESTRPIPE] Streams pipe error",
    "[system error EUSERS] Too many users",
    "[system error ENOTSOCK] Socket operation on non-socket",
    "[system error EDESTADDRREQ] Destination address required",
    "[system error EMSGSIZE] Message too long",
    "[system error EPROTOTYPE] Protocol wrong type for socket",
    "[system error ENOPROTOOPT] Protocol not available",
    "[system error EPROTONOSUPPORT] Protocol not supported",
    "[system error ESOCKTNOSUPPORT] Socket type not supported",
    "[system error EOPNOTSUPP] Operation not supported",
    "[system error EPFNOSUPPORT] Protocol family not supported",
    "[system error EAFNOSUPPORT] Address family not supported by protocol",
    "[system error EADDRINUSE] Address already in use",
    "[system error EADDRNOTAVAIL] Cannot assign requested address",
    "[system error ENETDOWN] Network is down",
    "[system error ENETUNREACH] Network is unreachable",
    "[system error ENETRESET] Network dropped connection on reset",
    "[system error ECONNABORTED] Software caused connection abort",
    "[system error ECONNRESET] Connection reset by peer",
    "[system error ENOBUFS] No buffer space available",
    "[system error EISCONN] Transport endpoint is already connected",
    "[system error ENOTCONN] Transport endpoint is not connected",
    "[system error ESHUTDOWN] Cannot send after transport endpoint shutdown",
    "[system error ETOOMANYREFS] Too many references: cannot splice",
    "[system error ETIMEDOUT] Connection timed out",
    "[system error ECONNREFUSED] Connection refused",
    "[system error EHOSTDOWN] Host is down",
    "[system error EHOSTUNREACH] No route to host",
    "[system error EALREADY] Operation already in progress",
    "[system error EINPROGRESS] Operation now in progress",
    "[system error ESTALE] Stale file handle",
    "[system error EUCLEAN] Structure needs cleaning",
    "[system error ENOTNAM] Not a XENIX named type file",
    "[system error ENAVAIL] No XENIX semaphores available",
    "[system error EISNAM] Is a named type file",
    "[system error EREMOTEIO] Remote I/O error",
    "[system error EDQUOT] Disk quota exceeded",
    "[system error ENOMEDIUM] No medium found",
    "[system error EMEDIUMTYPE] Wrong medium type",
    "[system error ECANCELED] Operation canceled",
    "[system error ENOKEY] Required key not available",
    "[system error EKEYEXPIRED] Key has expired",
    "[system error EKEYREVOKED] Key has been revoked",
    "[system error EKEYREJECTED] Key was rejected by service",
    "[system error EOWNERDEAD] Owner died",
    "[system error ENOTRECOVERABLE] State not recoverable",
    "[system error ERFKILL] Operation not possible due to RF-kill",
    "[system error EHWPOISON] Memory page has hardware error"
];

# Transform an errno value into an `std::error`-compatible pointer.
func error(errno: ssize) *[]byte {
    if errno < 0 or (:usize)errno >= countof(ERRORS) {
        let UNKNOWN = "Unknown system error";
        return &UNKNOWN;
    }
    return &sys::ERRORS[(:usize)errno];
}

let STDIN_FILENO:  sint = 0;
let STDOUT_FILENO: sint = 1;
let STDERR_FILENO: sint = 2;

# emscripten/system/lib/libc/musl/include/fcntl.h
let O_RDONLY:    sint = 0x00000000;
let O_WRONLY:    sint = 0x00000001;
let O_RDWR:      sint = 0x00000002;
# emscripten/system/lib/libc/musl/arch/generic/bits/fcntl.h
let O_CREAT:     sint = 0o0000100;
let O_TRUNC:     sint = 0o0001000;
let O_APPEND:    sint = 0o0002000;
let O_DIRECTORY: sint = 0o0200000;
let O_CLOEXEC:   sint = 0o2000000;

# emscripten/system/include/wasi/api.h
let __WASI_WHENCE_SET: u8 = 0;
let __WASI_WHENCE_CUR: u8 = 1;
let __WASI_WHENCE_END: u8 = 2;

# emscripten/system/lib/libc/musl/include/fcntl.h
let SEEK_SET: sint = (:sint)__WASI_WHENCE_SET;
let SEEK_CUR: sint = (:sint)__WASI_WHENCE_CUR;
let SEEK_END: sint = (:sint)__WASI_WHENCE_END;

# emscripten/system/lib/libc/musl/include/sys/mman.h
let PROT_NONE:  sint = 0x0;
let PROT_READ:  sint = 0x1;
let PROT_WRITE: sint = 0x2;
let PROT_EXEC:  sint = 0x4;

# emscripten/system/lib/libc/musl/include/sys/mman.h
let MAP_SHARED:    sint = 0x01;
let MAP_PRIVATE:   sint = 0x02;
let MAP_FIXED:     sint = 0x10;
let MAP_ANONYMOUS: sint = 0x20;

# emscripten/system/lib/libc/musl/arch/emscripten/bits/limits.h
let PAGE_SIZE: usize = 65536;

# emscripten/system/lib/libc/musl/include/limits.h
let NAME_MAX: usize =  255;
let PATH_MAX: usize = 4096;

# emscripten/system/lib/libc/musl/arch/generic/bits/dirent.h
### struct dirent {
###     ino_t d_ino;
###     off_t d_off;
###     unsigned short d_reclen;
###     unsigned char d_type;
###     char d_name[256];
### };
struct dirent {
    var d_ino: ino_t;
    var d_off: off_t;
    var d_reclen: ushort;
    var d_type: uchar;
    var d_name: [0]char;
}
alias dirent64 = dirent;

extern func read(fd: sint, buf: *char, count: size_t) ssize;
extern func write(fd: sint, buf: *char, count: size_t) ssize;
extern func open(filename: *char, flags: sint, mode: mode_t) ssize;
extern func close(fd: sint) ssize;
extern func lseek(fd: sint, offset: off_t, whence: sint) ssize;
extern func mmap(addr: *any, len: size_t, prot: sint, flags: sint, fd: sint, off: off_t) ssize;
extern func munmap(addr: *any, len: size_t) ssize;
extern func exit(error_code: sint) void;
extern func mkdir(pathname: *byte, mode: mode_t) ssize;
extern func rmdir(pathname: *byte) ssize;
extern func unlink(pathname: *byte) ssize;
extern func getdents64(fd: sint, dirent: *dirent64, count: uint) ssize;

extern var argc: usize;
extern var argv: **byte;
extern var envp: **byte;

extern func dump_bytes(addr: *any, size: usize) void;
func dump[[T]](object: T) void {
    dump_bytes(&object, sizeof(T));
}

extern func str_to_f32(out: *f32, start: *byte, count: usize) bool;
extern func str_to_f64(out: *f64, start: *byte, count: usize) bool;

extern func f32_to_str(buf: *byte, f: f32) bool;
extern func f64_to_str(buf: *byte, f: f64) bool;

extern func f32_abs(x: f32) f32;
extern func f32_min(x: f32, y: f32) f32;
extern func f32_max(x: f32, y: f32) f32;

extern func f64_abs(x: f64) f64;
extern func f64_min(x: f64, y: f64) f64;
extern func f64_max(x: f64, y: f64) f64;

# Exponential Functions
extern func f32_ln(x: f32) f32;
extern func f32_log2(x: f32) f32;
extern func f32_log10(x: f32) f32;

extern func f64_ln(x: f64) f64;
extern func f64_log2(x: f64) f64;
extern func f64_log10(x: f64) f64;

# Power Functions
extern func f32_sqrt(x: f32) f32;
extern func f32_cbrt(x: f32) f32;
extern func f32_hypot(x: f32, y: f32) f32;
extern func f32_pow(base: f32, exponent: f32) f32;

extern func f64_sqrt(x: f64) f64;
extern func f64_cbrt(x: f64) f64;
extern func f64_hypot(x: f64, y: f64) f64;
extern func f64_pow(base: f64, exponent: f64) f64;

# Trigonometric Functions
extern func f32_sin(x: f32) f32;
extern func f32_cos(x: f32) f32;
extern func f32_tan(x: f32) f32;
extern func f32_asin(x: f32) f32;
extern func f32_acos(x: f32) f32;
extern func f32_atan(x: f32) f32;
extern func f32_atan2(y: f32, x: f32) f32;

extern func f64_sin(x: f64) f64;
extern func f64_cos(x: f64) f64;
extern func f64_tan(x: f64) f64;
extern func f64_asin(x: f64) f64;
extern func f64_acos(x: f64) f64;
extern func f64_atan(x: f64) f64;
extern func f64_atan2(y: f64, x: f64) f64;

# Hyperbolic Functions
extern func f32_sinh(x: f32) f32;
extern func f32_cosh(x: f32) f32;
extern func f32_tanh(x: f32) f32;
extern func f32_asinh(x: f32) f32;
extern func f32_acosh(x: f32) f32;
extern func f32_atanh(x: f32) f32;

extern func f64_sinh(x: f64) f64;
extern func f64_cosh(x: f64) f64;
extern func f64_tanh(x: f64) f64;
extern func f64_asinh(x: f64) f64;
extern func f64_acosh(x: f64) f64;
extern func f64_atanh(x: f64) f64;

# Rounding Functions
extern func f32_ceil(x: f32) f32;
extern func f32_floor(x: f32) f32;
extern func f32_trunc(x: f32) f32;
extern func f32_round(x: f32) f32;

extern func f64_ceil(x: f64) f64;
extern func f64_floor(x: f64) f64;
extern func f64_trunc(x: f64) f64;
extern func f64_round(x: f64) f64;

# Classification Functions
extern func f32_is_finite(x: f32) bool;
extern func f32_is_normal(x: f32) bool;
extern func f32_is_inf(x: f32) bool;
extern func f32_is_nan(x: f32) bool;

extern func f64_is_finite(x: f64) bool;
extern func f64_is_normal(x: f64) bool;
extern func f64_is_inf(x: f64) bool;
extern func f64_is_nan(x: f64) bool;
