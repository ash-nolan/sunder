import "std/page_allocator.sunder";
import "std/vector.sunder";

func dump_elements[[T]](pvec: *std::vector[[T]]) void {
    var slice: []T = pvec.*.data();
    for i in 0:countof(slice) {
        dump slice[i];
    }
}

func main() void {
    var vec: std::vector[[u8]] = std::vector[[u8]]::init(std::page_allocator::the());
    const A: u8 = 0xAA;
    const B: u8 = 0xBB;
    const C: u8 = 0xCC;

    # [A]
    vec.push(A);
    dump vec.count();
    dump_elements[[u8]](&vec);

    # [A][B]
    vec.push(B);
    dump vec.count();
    dump_elements[[u8]](&vec);

    # [A][B][C]
    vec.push(C);
    dump vec.count();
    dump_elements[[u8]](&vec);

    # [A][B]
    vec.pop();
    dump vec.count();
    dump_elements[[u8]](&vec);

    # [A]
    vec.pop();
    dump vec.count();
    dump_elements[[u8]](&vec);

    # Empty
    vec.pop();
    dump vec.count();
    dump_elements[[u8]](&vec);

    # Attempt to pop empty vec.
    vec.pop();
    dump vec.count();
    dump_elements[[u8]](&vec);
}
################################################################################
# 01 00 00 00 00 00 00 00
# AA
# 02 00 00 00 00 00 00 00
# AA
# BB
# 03 00 00 00 00 00 00 00
# AA
# BB
# CC
# 02 00 00 00 00 00 00 00
# AA
# BB
# 01 00 00 00 00 00 00 00
# AA
# 00 00 00 00 00 00 00 00
# panic: attempted to pop empty vec
