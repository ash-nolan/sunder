import "std/core.sunder";

func format_test0() void {
    var a: std::int[[:u32]] = std::int[[:u32]]::init(0xDEADBEEF);
    var a_fmtr: std::formatter = std::formatter::init[[:std::int[[:u32]]]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var res: std::result[[:usize, :[]byte]] = std::write_format(std::out(), "{}\n", args[0:countof(args)]);

    dump res.value();
}

func format_test1() void {
    var a: std::int[[:s32]] = std::int[[:s32]]::init(-123);
    var a_fmtr: std::formatter = std::formatter::init[[:std::int[[:s32]]]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var res: std::result[[:usize, :[]byte]] = std::write_format(std::out(), "{}\n", args[0:countof(args)]);

    dump res.value();
}

func format_test2() void {
    var a: std::int[[:u32]] = std::int[[:u32]]::init(0xDEADBEEF);
    var a_fmtr: std::formatter = std::formatter::init[[:std::int[[:u32]]]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var res: std::result[[:usize, :[]byte]] = std::write_format(std::out(), "{d}\n", args[0:countof(args)]);

    dump res.value();
}

func format_test3() void {
    var a: std::int[[:u32]] = std::int[[:u32]]::init(0xDEADBEEF);
    var a_fmtr: std::formatter = std::formatter::init[[:std::int[[:u32]]]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var res: std::result[[:usize, :[]byte]] = std::write_format(std::out(), "{b}\n", args[0:countof(args)]);

    dump res.value();
}

func format_test4() void {
    var a: std::int[[:u32]] = std::int[[:u32]]::init(0xDEADBEEF);
    var a_fmtr: std::formatter = std::formatter::init[[:std::int[[:u32]]]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var res: std::result[[:usize, :[]byte]] = std::write_format(std::out(), "{o}\n", args[0:countof(args)]);

    dump res.value();
}

func format_test5() void {
    var a: std::int[[:u32]] = std::int[[:u32]]::init(0xDEADBEEF);
    var a_fmtr: std::formatter = std::formatter::init[[:std::int[[:u32]]]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var res: std::result[[:usize, :[]byte]] = std::write_format(std::out(), "{x}\n", args[0:countof(args)]);

    dump res.value();
}

func format_test6() void {
    var a: std::int[[:u32]] = std::int[[:u32]]::init(0xDEADBEEF);
    var a_fmtr: std::formatter = std::formatter::init[[:std::int[[:u32]]]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var res: std::result[[:usize, :[]byte]] = std::write_format(std::out(), "{X}\n", args[0:countof(args)]);

    dump res.value();
}

func format_test7() void {
    var a: std::int[[:s32]] = std::int[[:s32]]::init(-0xBEEF);
    var a_fmtr: std::formatter = std::formatter::init[[:std::int[[:s32]]]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var res: std::result[[:usize, :[]byte]] = std::write_format(std::out(), "{X}\n", args[0:countof(args)]);

    dump res.value();
}

# Test that zero is properly printed in all formats.
func format_test8() void {
    var a: std::int[[:s32]] = std::int[[:s32]]::init(0);
    var a_fmtr: std::formatter = std::formatter::init[[:std::int[[:s32]]]](&a);

    var res: std::result[[:usize, :[]byte]] = std::write_format(
        std::out(),
        "{} {d} {b} {o} {x}\n",
        (:[]std::formatter)[a_fmtr, a_fmtr, a_fmtr, a_fmtr, a_fmtr]);

    dump res.value();
}

func format_test9() void {
    var a: std::int[[:u32]] = std::int[[:u32]]::init(0xDEADBEEF);
    var a_fmtr: std::formatter = std::formatter::init[[:std::int[[:u32]]]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var res: std::result[[:usize, :[]byte]] = std::write_format(std::out(), "{l}\n", args[0:countof(args)]);

    std::print_line(std::err(), res.error());
}

func main() void {
    var a: std::int[[:s32]] = std::int[[:s32]]::init(+123);
    var b: std::int[[:s32]] = std::int[[:s32]]::init(-123);
    dump a.value < b.value;
    dump a.value > b.value;
    dump a.value <= b.value;
    dump a.value >= b.value;
    dump a.value == b.value;

    format_test0();
    format_test1();
    format_test2();
    format_test3();
    format_test4();
    format_test5();
    format_test6();
    format_test7();
    format_test8();
    format_test9();
}
################################################################################
# 00
# 01
# 00
# 01
# 00
# 3735928559
# 0B 00 00 00 00 00 00 00
# -123
# 05 00 00 00 00 00 00 00
# 3735928559
# 0B 00 00 00 00 00 00 00
# 0b11011110101011011011111011101111
# 23 00 00 00 00 00 00 00
# 0o33653337357
# 0E 00 00 00 00 00 00 00
# 0xdeadbeef
# 0B 00 00 00 00 00 00 00
# 0xDEADBEEF
# 0B 00 00 00 00 00 00 00
# -0xBEEF
# 08 00 00 00 00 00 00 00
# 0 0 0b0 0o0 0x0
# 10 00 00 00 00 00 00 00
# panic: invalid format specifier "l"
