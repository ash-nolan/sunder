import "std";

func check(lhs: []byte, rhs: []byte) void {
    var lhs_str = std::str::init(lhs);
    var rhs_str = std::str::init(rhs);

    var eq = std::int[[:u8]]::init((:u8)std::eq[[:std::str]](&lhs_str, &rhs_str));
    std::print_format_line(
        std::out(),
        "\"{e}\" == \"{e}\" => {}",
        (:[]std::formatter)[
            std::formatter::init[[:std::str]](&lhs_str),
            std::formatter::init[[:std::str]](&rhs_str),
            std::formatter::init[[:std::int[[:u8]]]](&eq)]);

    var ne = std::int[[:u8]]::init((:u8)std::ne[[:std::str]](&lhs_str, &rhs_str));
    std::print_format_line(
        std::out(),
        "\"{e}\" != \"{e}\" => {}",
        (:[]std::formatter)[
            std::formatter::init[[:std::str]](&lhs_str),
            std::formatter::init[[:std::str]](&rhs_str),
            std::formatter::init[[:std::int[[:u8]]]](&ne)]);

    var lt = std::int[[:u8]]::init((:u8)std::lt[[:std::str]](&lhs_str, &rhs_str));
    std::print_format_line(
        std::out(),
        "\"{e}\" <  \"{e}\" => {}",
        (:[]std::formatter)[
            std::formatter::init[[:std::str]](&lhs_str),
            std::formatter::init[[:std::str]](&rhs_str),
            std::formatter::init[[:std::int[[:u8]]]](&lt)]);

    var le = std::int[[:u8]]::init((:u8)std::le[[:std::str]](&lhs_str, &rhs_str));
    std::print_format_line(
        std::out(),
        "\"{e}\" <= \"{e}\" => {}",
        (:[]std::formatter)[
            std::formatter::init[[:std::str]](&lhs_str),
            std::formatter::init[[:std::str]](&rhs_str),
            std::formatter::init[[:std::int[[:u8]]]](&le)]);

    var gt = std::int[[:u8]]::init((:u8)std::gt[[:std::str]](&lhs_str, &rhs_str));
    std::print_format_line(
        std::out(),
        "\"{e}\" >  \"{e}\" => {}",
        (:[]std::formatter)[
            std::formatter::init[[:std::str]](&lhs_str),
            std::formatter::init[[:std::str]](&rhs_str),
            std::formatter::init[[:std::int[[:u8]]]](&gt)]);

    var ge = std::int[[:u8]]::init((:u8)std::ge[[:std::str]](&lhs_str, &rhs_str));
    std::print_format_line(
        std::out(),
        "\"{e}\" >= \"{e}\" => {}",
        (:[]std::formatter)[
            std::formatter::init[[:std::str]](&lhs_str),
            std::formatter::init[[:std::str]](&rhs_str),
            std::formatter::init[[:std::int[[:u8]]]](&ge)]);
}

func main() void {
    check("", "");
    std::print_line(std::out(), "========");
    check("A", "A");
    std::print_line(std::out(), "========");
    check("A", "B");
    std::print_line(std::out(), "========");
    check("B", "A");
    std::print_line(std::out(), "========");
    check("A", "AA");
    std::print_line(std::out(), "========");
    check("AA", "A");
    std::print_line(std::out(), "========");
    check("A\0", "A\0");
}
################################################################################
# "" == "" => 1
# "" != "" => 0
# "" <  "" => 0
# "" <= "" => 1
# "" >  "" => 0
# "" >= "" => 1
# ========
# "A" == "A" => 1
# "A" != "A" => 0
# "A" <  "A" => 0
# "A" <= "A" => 1
# "A" >  "A" => 0
# "A" >= "A" => 1
# ========
# "A" == "B" => 0
# "A" != "B" => 1
# "A" <  "B" => 1
# "A" <= "B" => 1
# "A" >  "B" => 0
# "A" >= "B" => 0
# ========
# "B" == "A" => 0
# "B" != "A" => 1
# "B" <  "A" => 0
# "B" <= "A" => 0
# "B" >  "A" => 1
# "B" >= "A" => 1
# ========
# "A" == "AA" => 0
# "A" != "AA" => 1
# "A" <  "AA" => 1
# "A" <= "AA" => 1
# "A" >  "AA" => 0
# "A" >= "AA" => 0
# ========
# "AA" == "A" => 0
# "AA" != "A" => 1
# "AA" <  "A" => 0
# "AA" <= "A" => 0
# "AA" >  "A" => 1
# "AA" >= "A" => 1
# ========
# "A\0" == "A\0" => 1
# "A\0" != "A\0" => 0
# "A\0" <  "A\0" => 0
# "A\0" <= "A\0" => 1
# "A\0" >  "A\0" => 0
# "A\0" >= "A\0" => 1
