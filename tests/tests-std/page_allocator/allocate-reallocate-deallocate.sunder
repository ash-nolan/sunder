import "std/core.sunder";
import "std/page_allocator.sunder";

func main() void {
    var allocator: std::allocator = std::page_allocator::the();

    # 2048 * sizeof(u16) should allocate one page.
    var res = allocator.allocate(alignof(u16), 2048 * sizeof(u16));
    var ptr = (:*u16)res.value();
    var slice: []u16 = (:[]u16){ptr, 2048};

    # Make sure we can write to all the elements.
    for i in 0:countof(slice) {
        slice[i] = 0xBEEF;
    }

    # 4096 * sizeof(u16) should allocate two pages.
    res = allocator.reallocate(
        (:*byte)ptr,
        alignof(u16),
        2048 * sizeof(u16),
        4096 * sizeof(u16));
    ptr = (:*u16)res.value();
    slice = (:[]u16){ptr, 4096};

    # Again make sure we can write to all the elements.
    for i in 0:countof(slice) {
        slice[i] = 0xF00D;
    }

    # Shrink the buffer down.
    res = allocator.reallocate(
        (:*byte)ptr,
        alignof(u16),
        4096 * sizeof(u16),
        1000 * sizeof(u16));
    ptr = (:*u16)res.value();
    slice = (:[]u16){ptr, 1000};

    # And yet again make sure we can write to all the elements.
    for i in 0:countof(slice) {
        slice[i] = 0xCAFE;
    }

    # Deallocate the buffer.
    allocator.deallocate((:*byte)ptr, alignof(u16), 1000);
}
