import "std";

func main() void {
    var set = std::hash_set[[[]byte]]::init();
    defer set.fini();

    assert set.count() == 0;
    assert not set.contains("foo");
    assert not set.contains("bar");

    var existing = set.insert("foo");
    assert existing.is_empty();
    assert set.count() == 1;
    assert set.contains("foo");
    assert not set.contains("bar");

    var existing = set.insert("foo");
    assert existing.is_value() and std::str::eq(existing.value(), "foo");
    assert set.count() == 1;
    assert set.contains("foo");
    assert not set.contains("bar");

    var existing = set.insert("bar");
    assert existing.is_empty();
    assert set.count() == 2;
    assert set.contains("foo");
    assert set.contains("bar");

    var removed = set.remove("foo");
    assert removed.is_value() and std::str::eq(removed.value(), "foo");
    assert set.count() == 1;
    assert not set.contains("foo");
    assert set.contains("bar");

    var removed = set.remove("baz");
    assert removed.is_empty();
    assert set.count() == 1;
    assert not set.contains("foo");
    assert set.contains("bar");

    # Test set inserts. Also test std::set::init_with_allocator.
    var set = std::hash_set[[ssize]]::init_with_allocator(std::global_allocator());
    defer set.fini();

    for x in 0x123456:0x123456+100000 {
        set.insert((:ssize)x);
    }
    for x in 0x123456:0x123456+100000 {
        assert set.contains((:ssize)x);
    }
    assert set.count() == 100000;
    for x in 0x123456:0x123456+100000 {
        set.remove((:ssize)x);
    }
    assert set.count() == 0;
}
