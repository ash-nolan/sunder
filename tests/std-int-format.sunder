import "std/core.sunder";

func format_test0() void {
    var a: u32 = 0xDEADBEEF;
    var a_fmtr: std::formatter = std::formatter::init[[u32]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var result = std::write_format(std::out(), "{}\n", args[0:countof(args)]);

    dump result.value();
}

func format_test1() void {
    var a: s32 = -123;
    var a_fmtr: std::formatter = std::formatter::init[[s32]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var result = std::write_format(std::out(), "{}\n", args[0:countof(args)]);

    dump result.value();
}

func format_test2() void {
    var a: u32 = 0xDEADBEEF;
    var a_fmtr: std::formatter = std::formatter::init[[u32]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var result = std::write_format(std::out(), "{d}\n", args[0:countof(args)]);

    dump result.value();
}

func format_test3() void {
    var a: u32 = 0xDEADBEEF;
    var a_fmtr: std::formatter = std::formatter::init[[u32]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var result = std::write_format(std::out(), "{b}\n", args[0:countof(args)]);

    dump result.value();
}

func format_test4() void {
    var a: u32 = 0xDEADBEEF;
    var a_fmtr: std::formatter = std::formatter::init[[u32]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var result = std::write_format(std::out(), "{o}\n", args[0:countof(args)]);

    dump result.value();
}

func format_test5() void {
    var a: u32 = 0xDEADBEEF;
    var a_fmtr: std::formatter = std::formatter::init[[u32]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var result = std::write_format(std::out(), "{x}\n", args[0:countof(args)]);

    dump result.value();
}

func format_test6() void {
    var a: u32 = 0xDEADBEEF;
    var a_fmtr: std::formatter = std::formatter::init[[u32]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var result = std::write_format(std::out(), "{X}\n", args[0:countof(args)]);

    dump result.value();
}

func format_test7() void {
    var a: s32 = -0xBEEF;
    var a_fmtr: std::formatter = std::formatter::init[[s32]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var result = std::write_format(std::out(), "{X}\n", args[0:countof(args)]);

    dump result.value();
}

# Test that zero is properly printed in all formats.
func format_test8() void {
    var a: s32 = 0;
    var a_fmtr: std::formatter = std::formatter::init[[s32]](&a);

    var result = std::write_format(
        std::out(),
        "{} {d} {b} {o} {x}\n",
        (:[]std::formatter)[a_fmtr, a_fmtr, a_fmtr, a_fmtr, a_fmtr]);

    dump result.value();
}

# Test for minimum negative number (subject to integer out-of-range if negated).
func format_test9() void {
    var a: s8 = -128;
    var a_fmtr: std::formatter = std::formatter::init[[s8]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var result = std::write_format(std::out(), "{}\n", args[0:countof(args)]);

    dump result.value();
}

func format_test10() void {
    var a: u32 = 0xDEADBEEF;
    var a_fmtr: std::formatter = std::formatter::init[[u32]](&a);

    var args: [1]std::formatter = (:[1]std::formatter)[a_fmtr];
    var result = std::write_format(std::out(), "{l}\n", args[0:countof(args)]);

    std::print_line(std::err(), result.error());
}

func main() void {
    format_test0();
    format_test1();
    format_test2();
    format_test3();
    format_test4();
    format_test5();
    format_test6();
    format_test7();
    format_test8();
    format_test9();
    format_test10();
}
################################################################################
# 3735928559
#
# -123
#
# 3735928559
#
# 0b11011110101011011011111011101111
#
# 0o33653337357
#
# 0xdeadbeef
#
# 0xDEADBEEF
#
# -0xBEEF
#
# 0 0 0b0 0o0 0x0
#
# -128
#
# panic: invalid format specifier "l"
