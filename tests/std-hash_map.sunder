import "std/core.sunder";
import "std/hash_map.sunder";
import "std/page_allocator.sunder";

func main() void {
    var allocator = std::allocator::init[[std::page_allocator]](std::page_allocator::the());

    var map = std::hash_map[[[]byte, ssize]]::init(allocator);

    var count = map.count();
    std::print_format_line(std::out(), "Count {}", (:[]std::formatter)[std::formatter::init[[usize]](&count)]);
    var lookup_foo = map.lookup("foo");
    var lookup_bar = map.lookup("bar");
    dump lookup_foo.is_value();
    dump lookup_bar.is_value();

    dump void::init();

    map.insert("foo", 123);
    var count = map.count();
    std::print_format_line(std::out(), "Count {}", (:[]std::formatter)[std::formatter::init[[usize]](&count)]);
    var lookup_foo = map.lookup("foo");
    var lookup_bar = map.lookup("bar");
    dump lookup_foo.is_value();
    dump lookup_bar.is_value();
    var value = lookup_foo.value();
    std::print_format_line(
        std::out(),
        "{}",
        (:[]std::formatter)[std::formatter::init[[ssize]](&value)]);

    dump void::init();

    map.insert("foo", 456);
    var count = map.count();
    std::print_format_line(std::out(), "Count {}", (:[]std::formatter)[std::formatter::init[[usize]](&count)]);
    var lookup_foo = map.lookup("foo");
    var lookup_bar = map.lookup("bar");
    dump lookup_foo.is_value();
    dump lookup_bar.is_value();
    var value_foo = lookup_foo.value();
    std::print_format_line(
        std::out(),
        "{}",
        (:[]std::formatter)[std::formatter::init[[ssize]](&value_foo)]);

    dump void::init();

    map.insert("bar", 789);
    var count = map.count();
    std::print_format_line(std::out(), "Count {}", (:[]std::formatter)[std::formatter::init[[usize]](&count)]);
    var lookup_foo = map.lookup("foo");
    var lookup_bar = map.lookup("bar");
    dump lookup_foo.is_value();
    dump lookup_bar.is_value();
    var value_foo = lookup_foo.value();
    var value_bar = lookup_bar.value();
    std::print_format_line(
        std::out(),
        "{} {}",
        (:[]std::formatter)[
            std::formatter::init[[ssize]](&value_foo),
            std::formatter::init[[ssize]](&value_bar)]);

    dump void::init();

    var removed = map.remove("foo");
    var count = map.count();
    std::print_format_line(std::out(), "Count {}", (:[]std::formatter)[std::formatter::init[[usize]](&count)]);
    var lookup_foo = map.lookup("foo");
    var lookup_bar = map.lookup("bar");
    dump lookup_foo.is_value();
    dump lookup_bar.is_value();
    var value_bar = lookup_bar.value();
    std::print_format_line(
        std::out(),
        "{}",
        (:[]std::formatter)[
            std::formatter::init[[ssize]](&value_bar)]);
    var removed_value = removed.value();
    std::print_format_line(
        std::out(),
        "Removed {}",
        (:[]std::formatter)[
            std::formatter::init[[ssize]](&removed_value)]);

    map.fini();

    dump void::init();

    var map = std::hash_map[[ssize, usize]]::init(allocator);
    for x in 0x123456:0x123456+100000 {
        map.insert((:ssize)x, x);
    }
    for x in 0x123456:0x123456+100000 {
        if not map.contains((:ssize)x) {
            std::panic("unreachable");
        }
    }
    var count = map.count();
    std::print_format_line(std::out(), "Count {}", (:[]std::formatter)[std::formatter::init[[usize]](&count)]);
    for x in 0x123456:0x123456+100000 {
        map.remove((:ssize)x);
    }
    var count = map.count();
    std::print_format_line(std::out(), "Count {}", (:[]std::formatter)[std::formatter::init[[usize]](&count)]);
    map.fini();
}
################################################################################
# Count 0
# 00
# 00
#
# Count 1
# 01
# 00
# 123
#
# Count 1
# 01
# 00
# 456
#
# Count 2
# 01
# 01
# 456 789
#
# Count 1
# 00
# 01
# 789
# Removed 456
#
# Count 100000
# Count 0
