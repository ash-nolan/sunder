import "std/core.sunder";
import "std/fs.sunder";

func main() void {
    var result: std::result[[std::file, []byte]] = std::file::open("data.tmp", std::file::OPEN_READ | std::file::OPEN_WRITE);
    var file: std::file = result.value();
    defer { file.fini(); }

    var _ = file.write("ABCD");
    var result = file.tell();
    dump result.value();

    var _ = file.write("EFGH");
    var result = file.tell();
    dump result.value();

    var result = file.seek(0, std::file::SEEK_START);
    std::assert(result.is_value());
    var result = file.tell();
    dump result.value();

    var result = file.seek(1, std::file::SEEK_START);
    std::assert(result.is_value());
    var result = file.tell();
    dump result.value();

    var result = file.seek(0, std::file::SEEK_END);
    std::assert(result.is_value());
    var result = file.tell();
    dump result.value();

    var result = file.seek(-1, std::file::SEEK_END);
    std::assert(result.is_value());
    var result = file.tell();
    dump result.value();

    var result = file.seek(-3, std::file::SEEK_CURRENT);
    std::assert(result.is_value());
    var result = file.tell();
    dump result.value();

    var _ = file.write("1234");
    var result = file.tell();
    dump result.value();

    var result = file.seek(0, std::file::SEEK_START);
    std::assert(result.is_value());
    var buf: [512]byte = (:[512]byte)[0...];
    var result: std::result[[usize, []byte]] = file.read(buf[0:countof(buf)]);
    std::print_line(std::out(), buf[0:result.value()]);
}
################################################################################
# 04 00 00 00 00 00 00 00
# 08 00 00 00 00 00 00 00
# 00 00 00 00 00 00 00 00
# 01 00 00 00 00 00 00 00
# 08 00 00 00 00 00 00 00
# 07 00 00 00 00 00 00 00
# 04 00 00 00 00 00 00 00
# 08 00 00 00 00 00 00 00
# ABCD1234
