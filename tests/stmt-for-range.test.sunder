import "sys";

func seven() usize {
    return 7u;
}

func main() void {
    for n in 3u:7u {
        sys::dump[[usize]](n);
    }

    # Check that shadowing works correctly.
    var i: usize = 0x42u;
    for i in 0xAu:0xDu {
        sys::dump[[usize]](i);
    }
    sys::dump[[usize]](i);

    # Check that the range works with general expressions.
    let begin: usize = 1u + 2u;
    var end: usize = seven();
    for i in begin:end {
        sys::dump[[usize]](i);
    }

    # Check that iteration stops if begin is greater than end.
    for i in 10:9 {
        sys::dump[[usize]](i);
    }

    # Explicit issue using caused by jge instead of jnb during codegen.
    let USIZE_MAX = 0xFFFFFFFFFFFFFFFFu;
    for _ in 0:USIZE_MAX {
        sys::dump[[u32]](0xDEADBEEFu32);
        break;
    }

    # Check for default-to-zero begin.
    for i in 3 {
        sys::dump[[usize]](i);
    }
}
################################################################################
# 03 00 00 00 00 00 00 00
# 04 00 00 00 00 00 00 00
# 05 00 00 00 00 00 00 00
# 06 00 00 00 00 00 00 00
# 0A 00 00 00 00 00 00 00
# 0B 00 00 00 00 00 00 00
# 0C 00 00 00 00 00 00 00
# 42 00 00 00 00 00 00 00
# 03 00 00 00 00 00 00 00
# 04 00 00 00 00 00 00 00
# 05 00 00 00 00 00 00 00
# 06 00 00 00 00 00 00 00
# EF BE AD DE
# 00 00 00 00 00 00 00 00
# 01 00 00 00 00 00 00 00
# 02 00 00 00 00 00 00 00
