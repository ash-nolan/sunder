struct empty { }

var empty_a: empty = (:empty){};
const empty_b: empty = (:empty){};

struct point {
    var x: u32;
    var y: u32;
}

var point_a: point = (:point){.x = 0x00112233, .y = 0xAABBCCDD};
const point_b: point = (:point){.x = 0, .y = 0xFFFFFFFF};
const point_c: point = (:point){.y = 0xEEEEEEEE, .x = 0};
const point_d: point = (:point){
    .x = point_b.x + 1,
    .y = point_b.y - 1
};
const array: [2u]u32 = (:[2u]u32)[0xDEADBEEF, 0xCAFEF00D];
const point_e: point = (:point){
    .x = array[0],
    .y = array[1]
};


# Contains self-referential *foo and []foo types as well as alignment padding
# between the bool and pointer members. At the time of writing integer->pointer
# casts are not allowed in constant expressions, so instances of foo are all
# defined in main.
struct foo {
    var w: s32;
    var x: bool;
    var y: *foo;
    var z: []foo;
}

# Contains packed u8 and u16 members to check alignment.
struct bar {
    var w: u8;
    var x: u8;
    var y: u8;
    var z: u8;
    var p: u16;
    var q: u16;
    var r: u8;
    var s: u16;
}
const bar_a: bar = (:bar){
    .w = 0xAA,
    .x = 0xBB,
    .y = 0xCC,
    .z = 0xDD,
    .p = 0x0011,
    .q = 0x2233,
    .r = 0x44,
    .s = 0x5566
};

# Contains member variables and member functions.
struct baz {
    var value_a: u8;
    var value_b: u8;

    func init(value_a: u8, value_b: u8) baz {
        return (:baz){
            .value_a = value_a,
            .value_b = value_b
        };
    }

    func init_copy(from: *baz) baz {
        return (:baz){
            .value_a = (*from).value_a,
            .value_b = (*from).value_b
        };
    }

    func sum(self: *baz) u16 {
        return (:u16)(*self).value_a + (:u16)(*self).value_b;
    }
}
const baz_a: baz = (:baz){.value_a = 0xAA, .value_b = 0xBB};

func main() void {
    dump empty_a;
    dump empty_b;
    empty_a = empty_b;
    dump empty_a;

    dump point_a;
    dump point_a.x;
    dump point_a.y;
    point_a.x = 0xDEADBEEF;
    dump point_a;
    dump point_a.x;
    dump point_a.y;
    dump point_b;
    dump point_c;
    dump point_d;
    dump point_e;
    point_a = point_b;
    dump point_a;

    dump (:point){.x = array[0], .y = array[1]};
    dump (:point){.x = array[0], .y = array[1]}.x;

    var foo_a: foo = (:foo){
        .w = 1s32,
        .x = true,
        .y = (:*foo)0u,
        .z = (:[]foo){(:*foo)0u, 0u}
    };

    var foo_b: foo = (:foo){
        .z = (:[]foo){&foo_a, 1u},
        .y = &foo_a,
        .x = true,
        .w = 1s32
    };

    dump bar_a;

    dump baz_a;
    var baz_b: baz = baz::init(0xCC, 0xDD);
    dump baz_b;
    var baz_c: baz = baz::init_copy(&baz_b);
    dump baz_c;
    dump baz::sum(&baz_c);
    dump baz_c.sum();
}
################################################################################
#
#
#
# 33 22 11 00 DD CC BB AA
# 33 22 11 00
# DD CC BB AA
# EF BE AD DE DD CC BB AA
# EF BE AD DE
# DD CC BB AA
# 00 00 00 00 FF FF FF FF
# 00 00 00 00 EE EE EE EE
# 01 00 00 00 FE FF FF FF
# EF BE AD DE 0D F0 FE CA
# 00 00 00 00 FF FF FF FF
# EF BE AD DE 0D F0 FE CA
# EF BE AD DE
# AA BB CC DD 11 00 33 22 44 00 66 55
# AA BB
# CC DD
# CC DD
# A9 01
# A9 01
