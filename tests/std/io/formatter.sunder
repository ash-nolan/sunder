import "std/io.sunder";
import "std/mem.sunder";
import "std/panic.sunder";

struct name {
    var first: []byte;
    var last: []byte;

    func init(first: []byte, last: []byte) name {
        return (:name){.first = first, .last = last};
    }

    func format(self: *name, writer: std::writer, fmt: []byte) std::result[[:usize, :[]byte]] {
        if countof(fmt) != 0 {
            return std::result[[:usize, :[]byte]]::init_error(std::formatter::INVALID_FORMAT_SPECIFIER);
        }

        var written: usize = 0;
        var result: std::result[[:usize, :[]byte]] = std::mem::zeroed[[:std::result[[:usize, :[]byte]]]]();

        # Just assume all these writes will succeed lmao.
        result = std::write_all(writer, self.*.first);
        written = written + result.value();
        result = std::write_all(writer, " ");
        written = written + result.value();
        result = std::write_all(writer, self.*.last);
        written = written + result.value();

        return std::result[[:usize, :[]byte]]::init_value(written);
    }
}

struct int {
    # Pretend this is some std::* integer type that accepts a format specifier
    # of "d" to be printed in decimal, "b" to be printed in binary, "o" to be
    # printed in octal, or "x" to be printed in hexadecimal. For not we'll
    # avoid the actual int->bytes conversion part and just print the specifier
    # choice.
    func format(self: *int, writer: std::writer, fmt: []byte) std::result[[:usize, :[]byte]] {
        if countof(fmt) == 0 {
            return std::write_all(writer, "decimal\n");
        }

        var c: byte = fmt[0];
        if c == 'd' {
            return std::write_all(writer, "decimal\n");
        }
        if c == 'b' {
            return std::write_all(writer, "binary\n");
        }
        if c == 'o' {
            return std::write_all(writer, "octal\n");
        }
        if c == 'x' {
            return std::write_all(writer, "hexadecimal\n");
        }
        return std::result[[:usize, :[]byte]]::init_error(std::formatter::INVALID_FORMAT_SPECIFIER);
    }
}

func main() void {
    var writer: std::writer = std::writer::init[[:std::stream]](&std::out);

    var a: name = name::init("Nona", "Gaprindashvili");
    var b: name = name::init("Judit", "Polgar");

    var a_formatter: std::formatter = std::formatter::init[[:name]](&a);
    var b_formatter: std::formatter = std::formatter::init[[:name]](&b);

    a_formatter.format(writer, "");
    writer.write(" and ");
    b_formatter.format(writer, "");
    writer.write(" are amazing players!\n");

    var i: int = (:int){};
    var i_formatter: std::formatter = std::formatter::init[[:int]](&i);
    i_formatter.format(writer, "");
    i_formatter.format(writer, "d");
    i_formatter.format(writer, "b");
    i_formatter.format(writer, "o");
    i_formatter.format(writer, "x");
    var result: std::result[[:usize, :[]byte]] = i_formatter.format(writer, "nope");
    std::err.println(result.error());
}
################################################################################
# Nona Gaprindashvili and Judit Polgar are amazing players!
# decimal
# decimal
# binary
# octal
# hexadecimal
# invalid format specifier
