import "std/core.sunder";
import "std/big_integer.sunder";
import "std/general_allocator.sunder";
import "std/hash_map.sunder";

func main() void {
    var allocator = std::general_allocator::init();
    defer {
        allocator.fini();
    }
    var allocator = std::allocator::init[[typeof(allocator)]](&allocator);

    var map = std::hash_map[[std::big_integer, []byte]]::init(allocator);
    defer {
        map.fini();
    }

    var result = std::big_integer::init_from_str(allocator, "0", 0);
    map.insert(result.value(), "value 1");
    var result = std::big_integer::init_from_str(allocator, "+0xBEEFBEEFBEEFBEEF", 0);
    map.insert(result.value(), "value 2");
    var result = std::big_integer::init_from_str(allocator, "-0xBEEFBEEFBEEFBEEF", 0);
    map.insert(result.value(), "value 3");
    var result = std::big_integer::init_from_str(allocator, "-0xBEEFBEEFBEEFBEEF", 0);
    map.insert(result.value(), "value 4");
    var result = std::big_integer::init_from_str(allocator, "0xFFFFFFFFFFFFFFFF", 0);
    map.insert(result.value(), "value 5");

    var iterator = std::hash_map_iterator[[std::big_integer, []byte]]::init(&map);
    for iterator.advance() {
        std::print_format_line(
            std::out(),
            "{} : \"{e}\"",
            (:[]std::formatter)[
                std::formatter::init[[std::big_integer]](iterator.current().key),
                std::formatter::init[[[]byte]](iterator.current().value)]);
    }
}
################################################################################
# 0 : "value 1"
# 18446744073709551615 : "value 5"
# 13758425323549998831 : "value 2"
# -13758425323549998831 : "value 4"
