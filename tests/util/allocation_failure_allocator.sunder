namespace util;
import "std/core.sunder";

struct allocation_failure_allocator {
    func allocate(self: *allocation_failure_allocator, align: usize, size: usize) std::result[[*byte, std::error]] {
        return std::result[[*byte, std::error]]::init_error(std::error::ALLOCATION_FAILURE);
    }

    # Reallocation will panic since a call to allocate should never have
    # succeeded, so any provided pointer is invalid.
    func reallocate(self: *allocation_failure_allocator, ptr: *byte, align: usize, old_size: usize, new_size: usize) std::result[[*byte, std::error]] {
        std::panic("attempted allocation_failure_allocator reallocation");
        return std::zeroed[[std::result[[*byte, std::error]]]](); # unreachable
    }

    # Deallocation will panic since a call to allocate should never have
    # succeeded, so any provided pointer is invalid.
    func deallocate(self: *allocation_failure_allocator, ptr: *byte, align: usize, size: usize) void {
        std::panic("attempted allocation_failure_allocator deallocation");
    }

    func the() *allocation_failure_allocator {
        const the = (:allocation_failure_allocator){};
        return &the;
    }
}
